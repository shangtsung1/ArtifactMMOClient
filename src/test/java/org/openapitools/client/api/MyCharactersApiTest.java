/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActionItemBankResponseSchema;
import org.openapitools.client.model.CharacterFightResponseSchema;
import org.openapitools.client.model.CharacterMovementResponseSchema;
import org.openapitools.client.model.CraftingSchema;
import org.openapitools.client.model.DataPageLogSchema;
import org.openapitools.client.model.DeleteItemResponseSchema;
import org.openapitools.client.model.DepositWithdrawGoldSchema;
import org.openapitools.client.model.DestinationSchema;
import org.openapitools.client.model.EquipSchema;
import org.openapitools.client.model.EquipmentResponseSchema;
import org.openapitools.client.model.GETransactionItemSchema;
import org.openapitools.client.model.GETransactionResponseSchema;
import org.openapitools.client.model.GoldResponseSchema;
import org.openapitools.client.model.MyCharactersListSchema;
import org.openapitools.client.model.RecyclingResponseSchema;
import org.openapitools.client.model.RecyclingSchema;
import org.openapitools.client.model.SimpleItemSchema;
import org.openapitools.client.model.SkillResponseSchema;
import org.openapitools.client.model.TaskResponseSchema;
import org.openapitools.client.model.TaskRewardResponseSchema;
import org.openapitools.client.model.UnequipSchema;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MyCharactersApi
 */
@Disabled
public class MyCharactersApiTest {

    private final MyCharactersApi api = new MyCharactersApi();

    /**
     * Action Accept New Task
     *
     * Accepting a new task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionAcceptNewTaskMyNameActionTaskNewPostTest() throws ApiException {
        String name = null;
        TaskResponseSchema response = api.actionAcceptNewTaskMyNameActionTaskNewPost(name);
        // TODO: test validations
    }

    /**
     * Action Complete Task
     *
     * Complete a task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionCompleteTaskMyNameActionTaskCompletePostTest() throws ApiException {
        String name = null;
        TaskRewardResponseSchema response = api.actionCompleteTaskMyNameActionTaskCompletePost(name);
        // TODO: test validations
    }

    /**
     * Action Crafting
     *
     * Crafting an item. The character must be on a map with a workshop.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionCraftingMyNameActionCraftingPostTest() throws ApiException {
        String name = null;
        CraftingSchema craftingSchema = null;
        SkillResponseSchema response = api.actionCraftingMyNameActionCraftingPost(name, craftingSchema);
        // TODO: test validations
    }

    /**
     * Action Delete Item
     *
     * Delete an item from your character&#39;s inventory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionDeleteItemMyNameActionDeletePostTest() throws ApiException {
        String name = null;
        SimpleItemSchema simpleItemSchema = null;
        DeleteItemResponseSchema response = api.actionDeleteItemMyNameActionDeletePost(name, simpleItemSchema);
        // TODO: test validations
    }

    /**
     * Action Deposit Bank Gold
     *
     * Deposit golds in a bank on the character&#39;s map.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionDepositBankGoldMyNameActionBankDepositGoldPostTest() throws ApiException {
        String name = null;
        DepositWithdrawGoldSchema depositWithdrawGoldSchema = null;
        GoldResponseSchema response = api.actionDepositBankGoldMyNameActionBankDepositGoldPost(name, depositWithdrawGoldSchema);
        // TODO: test validations
    }

    /**
     * Action Deposit Bank
     *
     * Deposit an item in a bank on the character&#39;s map.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionDepositBankMyNameActionBankDepositPostTest() throws ApiException {
        String name = null;
        SimpleItemSchema simpleItemSchema = null;
        ActionItemBankResponseSchema response = api.actionDepositBankMyNameActionBankDepositPost(name, simpleItemSchema);
        // TODO: test validations
    }

    /**
     * Action Equip Item
     *
     * Equip an item on your character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionEquipItemMyNameActionEquipPostTest() throws ApiException {
        String name = null;
        EquipSchema equipSchema = null;
        EquipmentResponseSchema response = api.actionEquipItemMyNameActionEquipPost(name, equipSchema);
        // TODO: test validations
    }

    /**
     * Action Fight
     *
     * Start a fight against a monster on the character&#39;s map.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionFightMyNameActionFightPostTest() throws ApiException {
        String name = null;
        CharacterFightResponseSchema response = api.actionFightMyNameActionFightPost(name);
        // TODO: test validations
    }

    /**
     * Action Gathering
     *
     * Harvest a resource on the character&#39;s map.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionGatheringMyNameActionGatheringPostTest() throws ApiException {
        String name = null;
        SkillResponseSchema response = api.actionGatheringMyNameActionGatheringPost(name);
        // TODO: test validations
    }

    /**
     * Action Ge Buy Item
     *
     * Buy an item at the Grand Exchange on the character&#39;s map.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionGeBuyItemMyNameActionGeBuyPostTest() throws ApiException {
        String name = null;
        GETransactionItemSchema geTransactionItemSchema = null;
        GETransactionResponseSchema response = api.actionGeBuyItemMyNameActionGeBuyPost(name, geTransactionItemSchema);
        // TODO: test validations
    }

    /**
     * Action Ge Sell Item
     *
     * Sell an item at the Grand Exchange on the character&#39;s map.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionGeSellItemMyNameActionGeSellPostTest() throws ApiException {
        String name = null;
        GETransactionItemSchema geTransactionItemSchema = null;
        GETransactionResponseSchema response = api.actionGeSellItemMyNameActionGeSellPost(name, geTransactionItemSchema);
        // TODO: test validations
    }

    /**
     * Action Move
     *
     * Moves a character on the map using the map&#39;s X and Y position.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionMoveMyNameActionMovePostTest() throws ApiException {
        String name = null;
        DestinationSchema destinationSchema = null;
        CharacterMovementResponseSchema response = api.actionMoveMyNameActionMovePost(name, destinationSchema);
        // TODO: test validations
    }

    /**
     * Action Recycling
     *
     * Recyling an item. The character must be on a map with a workshop (only for equipments and weapons).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionRecyclingMyNameActionRecyclingPostTest() throws ApiException {
        String name = null;
        RecyclingSchema recyclingSchema = null;
        RecyclingResponseSchema response = api.actionRecyclingMyNameActionRecyclingPost(name, recyclingSchema);
        // TODO: test validations
    }

    /**
     * Action Task Exchange
     *
     * Exchange 3 tasks coins for a random reward. Rewards are exclusive resources for crafting  items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionTaskExchangeMyNameActionTaskExchangePostTest() throws ApiException {
        String name = null;
        TaskRewardResponseSchema response = api.actionTaskExchangeMyNameActionTaskExchangePost(name);
        // TODO: test validations
    }

    /**
     * Action Unequip Item
     *
     * Unequip an item on your character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionUnequipItemMyNameActionUnequipPostTest() throws ApiException {
        String name = null;
        UnequipSchema unequipSchema = null;
        EquipmentResponseSchema response = api.actionUnequipItemMyNameActionUnequipPost(name, unequipSchema);
        // TODO: test validations
    }

    /**
     * Action Withdraw Bank Gold
     *
     * Withdraw gold from your bank.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostTest() throws ApiException {
        String name = null;
        DepositWithdrawGoldSchema depositWithdrawGoldSchema = null;
        GoldResponseSchema response = api.actionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(name, depositWithdrawGoldSchema);
        // TODO: test validations
    }

    /**
     * Action Withdraw Bank
     *
     * Take an item from your bank and put it in the character&#39;s inventory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionWithdrawBankMyNameActionBankWithdrawPostTest() throws ApiException {
        String name = null;
        SimpleItemSchema simpleItemSchema = null;
        ActionItemBankResponseSchema response = api.actionWithdrawBankMyNameActionBankWithdrawPost(name, simpleItemSchema);
        // TODO: test validations
    }

    /**
     * Get All Characters Logs
     *
     * History of the last 100 actions of all your characters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCharactersLogsMyLogsGetTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        DataPageLogSchema response = api.getAllCharactersLogsMyLogsGet(page, size);
        // TODO: test validations
    }

    /**
     * Get My Characters
     *
     * List of your characters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMyCharactersMyCharactersGetTest() throws ApiException {
        MyCharactersListSchema response = api.getMyCharactersMyCharactersGet();
        // TODO: test validations
    }

}
