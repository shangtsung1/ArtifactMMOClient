/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DropRateSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-09T17:40:21.793932300+10:00[Australia/Sydney]", comments = "Generator version: 7.6.0")
public class ResourceSchema {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  /**
   * The skill required to gather this resource.
   */
  @JsonAdapter(SkillEnum.Adapter.class)
  public enum SkillEnum {
    MINING("mining"),
    
    WOODCUTTING("woodcutting"),
    
    FISHING("fishing");

    private String value;

    SkillEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SkillEnum fromValue(String value) {
      for (SkillEnum b : SkillEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SkillEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SkillEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SkillEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SkillEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SkillEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SKILL = "skill";
  @SerializedName(SERIALIZED_NAME_SKILL)
  private SkillEnum skill;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_DROPS = "drops";
  @SerializedName(SERIALIZED_NAME_DROPS)
  private List<DropRateSchema> drops = new ArrayList<>();

  public ResourceSchema() {
  }

  public ResourceSchema name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the resource
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ResourceSchema code(String code) {
    this.code = code;
    return this;
  }

   /**
   * The code of the resource. This is the resource&#39;s unique identifier (ID).
   * @return code
  **/
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public ResourceSchema skill(SkillEnum skill) {
    this.skill = skill;
    return this;
  }

   /**
   * The skill required to gather this resource.
   * @return skill
  **/
  @javax.annotation.Nonnull
  public SkillEnum getSkill() {
    return skill;
  }

  public void setSkill(SkillEnum skill) {
    this.skill = skill;
  }


  public ResourceSchema level(Integer level) {
    this.level = level;
    return this;
  }

   /**
   * The skill level required to gather this resource.
   * @return level
  **/
  @javax.annotation.Nonnull
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public ResourceSchema drops(List<DropRateSchema> drops) {
    this.drops = drops;
    return this;
  }

  public ResourceSchema addDropsItem(DropRateSchema dropsItem) {
    if (this.drops == null) {
      this.drops = new ArrayList<>();
    }
    this.drops.add(dropsItem);
    return this;
  }

   /**
   * The drops of this resource.
   * @return drops
  **/
  @javax.annotation.Nonnull
  public List<DropRateSchema> getDrops() {
    return drops;
  }

  public void setDrops(List<DropRateSchema> drops) {
    this.drops = drops;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceSchema resourceSchema = (ResourceSchema) o;
    return Objects.equals(this.name, resourceSchema.name) &&
        Objects.equals(this.code, resourceSchema.code) &&
        Objects.equals(this.skill, resourceSchema.skill) &&
        Objects.equals(this.level, resourceSchema.level) &&
        Objects.equals(this.drops, resourceSchema.drops);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, code, skill, level, drops);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceSchema {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    skill: ").append(toIndentedString(skill)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    drops: ").append(toIndentedString(drops)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("code");
    openapiFields.add("skill");
    openapiFields.add("level");
    openapiFields.add("drops");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("skill");
    openapiRequiredFields.add("level");
    openapiRequiredFields.add("drops");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ResourceSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceSchema is not found in the empty JSON string", ResourceSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResourceSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("skill").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skill` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skill").toString()));
      }
      // validate the required field `skill`
      SkillEnum.validateJsonElement(jsonObj.get("skill"));
      // ensure the json data is an array
      if (!jsonObj.get("drops").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `drops` to be an array in the JSON string but got `%s`", jsonObj.get("drops").toString()));
      }

      JsonArray jsonArraydrops = jsonObj.getAsJsonArray("drops");
      // validate the required field `drops` (array)
      for (int i = 0; i < jsonArraydrops.size(); i++) {
        DropRateSchema.validateJsonElement(jsonArraydrops.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceSchema>() {
           @Override
           public void write(JsonWriter out, ResourceSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResourceSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResourceSchema
  * @throws IOException if the JSON string is invalid with respect to ResourceSchema
  */
  public static ResourceSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceSchema.class);
  }

 /**
  * Convert an instance of ResourceSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

