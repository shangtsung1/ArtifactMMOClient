/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DropRateSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MonsterSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-09T17:40:21.793932300+10:00[Australia/Sydney]", comments = "Generator version: 7.6.0")
public class MonsterSchema {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_HP = "hp";
  @SerializedName(SERIALIZED_NAME_HP)
  private Integer hp;

  public static final String SERIALIZED_NAME_ATTACK_FIRE = "attack_fire";
  @SerializedName(SERIALIZED_NAME_ATTACK_FIRE)
  private Integer attackFire;

  public static final String SERIALIZED_NAME_ATTACK_EARTH = "attack_earth";
  @SerializedName(SERIALIZED_NAME_ATTACK_EARTH)
  private Integer attackEarth;

  public static final String SERIALIZED_NAME_ATTACK_WATER = "attack_water";
  @SerializedName(SERIALIZED_NAME_ATTACK_WATER)
  private Integer attackWater;

  public static final String SERIALIZED_NAME_ATTACK_AIR = "attack_air";
  @SerializedName(SERIALIZED_NAME_ATTACK_AIR)
  private Integer attackAir;

  public static final String SERIALIZED_NAME_RES_FIRE = "res_fire";
  @SerializedName(SERIALIZED_NAME_RES_FIRE)
  private Integer resFire;

  public static final String SERIALIZED_NAME_RES_EARTH = "res_earth";
  @SerializedName(SERIALIZED_NAME_RES_EARTH)
  private Integer resEarth;

  public static final String SERIALIZED_NAME_RES_WATER = "res_water";
  @SerializedName(SERIALIZED_NAME_RES_WATER)
  private Integer resWater;

  public static final String SERIALIZED_NAME_RES_AIR = "res_air";
  @SerializedName(SERIALIZED_NAME_RES_AIR)
  private Integer resAir;

  public static final String SERIALIZED_NAME_MIN_GOLD = "min_gold";
  @SerializedName(SERIALIZED_NAME_MIN_GOLD)
  private Integer minGold;

  public static final String SERIALIZED_NAME_MAX_GOLD = "max_gold";
  @SerializedName(SERIALIZED_NAME_MAX_GOLD)
  private Integer maxGold;

  public static final String SERIALIZED_NAME_DROPS = "drops";
  @SerializedName(SERIALIZED_NAME_DROPS)
  private List<DropRateSchema> drops = new ArrayList<>();

  public MonsterSchema() {
  }

  public MonsterSchema name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the monster.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MonsterSchema code(String code) {
    this.code = code;
    return this;
  }

   /**
   * The code of the monster. This is the monster&#39;s unique identifier (ID).
   * @return code
  **/
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public MonsterSchema level(Integer level) {
    this.level = level;
    return this;
  }

   /**
   * Monster level.
   * @return level
  **/
  @javax.annotation.Nonnull
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public MonsterSchema hp(Integer hp) {
    this.hp = hp;
    return this;
  }

   /**
   * Monster hit points.
   * @return hp
  **/
  @javax.annotation.Nonnull
  public Integer getHp() {
    return hp;
  }

  public void setHp(Integer hp) {
    this.hp = hp;
  }


  public MonsterSchema attackFire(Integer attackFire) {
    this.attackFire = attackFire;
    return this;
  }

   /**
   * Monster fire attack.
   * @return attackFire
  **/
  @javax.annotation.Nonnull
  public Integer getAttackFire() {
    return attackFire;
  }

  public void setAttackFire(Integer attackFire) {
    this.attackFire = attackFire;
  }


  public MonsterSchema attackEarth(Integer attackEarth) {
    this.attackEarth = attackEarth;
    return this;
  }

   /**
   * Monster earth attack.
   * @return attackEarth
  **/
  @javax.annotation.Nonnull
  public Integer getAttackEarth() {
    return attackEarth;
  }

  public void setAttackEarth(Integer attackEarth) {
    this.attackEarth = attackEarth;
  }


  public MonsterSchema attackWater(Integer attackWater) {
    this.attackWater = attackWater;
    return this;
  }

   /**
   * Monster water attack.
   * @return attackWater
  **/
  @javax.annotation.Nonnull
  public Integer getAttackWater() {
    return attackWater;
  }

  public void setAttackWater(Integer attackWater) {
    this.attackWater = attackWater;
  }


  public MonsterSchema attackAir(Integer attackAir) {
    this.attackAir = attackAir;
    return this;
  }

   /**
   * Monster air attack.
   * @return attackAir
  **/
  @javax.annotation.Nonnull
  public Integer getAttackAir() {
    return attackAir;
  }

  public void setAttackAir(Integer attackAir) {
    this.attackAir = attackAir;
  }


  public MonsterSchema resFire(Integer resFire) {
    this.resFire = resFire;
    return this;
  }

   /**
   * Monster % fire resistance.
   * @return resFire
  **/
  @javax.annotation.Nonnull
  public Integer getResFire() {
    return resFire;
  }

  public void setResFire(Integer resFire) {
    this.resFire = resFire;
  }


  public MonsterSchema resEarth(Integer resEarth) {
    this.resEarth = resEarth;
    return this;
  }

   /**
   * Monster % earth resistance.
   * @return resEarth
  **/
  @javax.annotation.Nonnull
  public Integer getResEarth() {
    return resEarth;
  }

  public void setResEarth(Integer resEarth) {
    this.resEarth = resEarth;
  }


  public MonsterSchema resWater(Integer resWater) {
    this.resWater = resWater;
    return this;
  }

   /**
   * Monster % water resistance.
   * @return resWater
  **/
  @javax.annotation.Nonnull
  public Integer getResWater() {
    return resWater;
  }

  public void setResWater(Integer resWater) {
    this.resWater = resWater;
  }


  public MonsterSchema resAir(Integer resAir) {
    this.resAir = resAir;
    return this;
  }

   /**
   * Monster % air resistance.
   * @return resAir
  **/
  @javax.annotation.Nonnull
  public Integer getResAir() {
    return resAir;
  }

  public void setResAir(Integer resAir) {
    this.resAir = resAir;
  }


  public MonsterSchema minGold(Integer minGold) {
    this.minGold = minGold;
    return this;
  }

   /**
   * Monster minimum gold drop. 
   * @return minGold
  **/
  @javax.annotation.Nonnull
  public Integer getMinGold() {
    return minGold;
  }

  public void setMinGold(Integer minGold) {
    this.minGold = minGold;
  }


  public MonsterSchema maxGold(Integer maxGold) {
    this.maxGold = maxGold;
    return this;
  }

   /**
   * Monster maximum gold drop. 
   * @return maxGold
  **/
  @javax.annotation.Nonnull
  public Integer getMaxGold() {
    return maxGold;
  }

  public void setMaxGold(Integer maxGold) {
    this.maxGold = maxGold;
  }


  public MonsterSchema drops(List<DropRateSchema> drops) {
    this.drops = drops;
    return this;
  }

  public MonsterSchema addDropsItem(DropRateSchema dropsItem) {
    if (this.drops == null) {
      this.drops = new ArrayList<>();
    }
    this.drops.add(dropsItem);
    return this;
  }

   /**
   * Monster drops. This is a list of items that the monster drops after killing the monster. 
   * @return drops
  **/
  @javax.annotation.Nonnull
  public List<DropRateSchema> getDrops() {
    return drops;
  }

  public void setDrops(List<DropRateSchema> drops) {
    this.drops = drops;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonsterSchema monsterSchema = (MonsterSchema) o;
    return Objects.equals(this.name, monsterSchema.name) &&
        Objects.equals(this.code, monsterSchema.code) &&
        Objects.equals(this.level, monsterSchema.level) &&
        Objects.equals(this.hp, monsterSchema.hp) &&
        Objects.equals(this.attackFire, monsterSchema.attackFire) &&
        Objects.equals(this.attackEarth, monsterSchema.attackEarth) &&
        Objects.equals(this.attackWater, monsterSchema.attackWater) &&
        Objects.equals(this.attackAir, monsterSchema.attackAir) &&
        Objects.equals(this.resFire, monsterSchema.resFire) &&
        Objects.equals(this.resEarth, monsterSchema.resEarth) &&
        Objects.equals(this.resWater, monsterSchema.resWater) &&
        Objects.equals(this.resAir, monsterSchema.resAir) &&
        Objects.equals(this.minGold, monsterSchema.minGold) &&
        Objects.equals(this.maxGold, monsterSchema.maxGold) &&
        Objects.equals(this.drops, monsterSchema.drops);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, code, level, hp, attackFire, attackEarth, attackWater, attackAir, resFire, resEarth, resWater, resAir, minGold, maxGold, drops);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonsterSchema {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    hp: ").append(toIndentedString(hp)).append("\n");
    sb.append("    attackFire: ").append(toIndentedString(attackFire)).append("\n");
    sb.append("    attackEarth: ").append(toIndentedString(attackEarth)).append("\n");
    sb.append("    attackWater: ").append(toIndentedString(attackWater)).append("\n");
    sb.append("    attackAir: ").append(toIndentedString(attackAir)).append("\n");
    sb.append("    resFire: ").append(toIndentedString(resFire)).append("\n");
    sb.append("    resEarth: ").append(toIndentedString(resEarth)).append("\n");
    sb.append("    resWater: ").append(toIndentedString(resWater)).append("\n");
    sb.append("    resAir: ").append(toIndentedString(resAir)).append("\n");
    sb.append("    minGold: ").append(toIndentedString(minGold)).append("\n");
    sb.append("    maxGold: ").append(toIndentedString(maxGold)).append("\n");
    sb.append("    drops: ").append(toIndentedString(drops)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("code");
    openapiFields.add("level");
    openapiFields.add("hp");
    openapiFields.add("attack_fire");
    openapiFields.add("attack_earth");
    openapiFields.add("attack_water");
    openapiFields.add("attack_air");
    openapiFields.add("res_fire");
    openapiFields.add("res_earth");
    openapiFields.add("res_water");
    openapiFields.add("res_air");
    openapiFields.add("min_gold");
    openapiFields.add("max_gold");
    openapiFields.add("drops");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("level");
    openapiRequiredFields.add("hp");
    openapiRequiredFields.add("attack_fire");
    openapiRequiredFields.add("attack_earth");
    openapiRequiredFields.add("attack_water");
    openapiRequiredFields.add("attack_air");
    openapiRequiredFields.add("res_fire");
    openapiRequiredFields.add("res_earth");
    openapiRequiredFields.add("res_water");
    openapiRequiredFields.add("res_air");
    openapiRequiredFields.add("min_gold");
    openapiRequiredFields.add("max_gold");
    openapiRequiredFields.add("drops");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MonsterSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonsterSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonsterSchema is not found in the empty JSON string", MonsterSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonsterSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonsterSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MonsterSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("drops").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `drops` to be an array in the JSON string but got `%s`", jsonObj.get("drops").toString()));
      }

      JsonArray jsonArraydrops = jsonObj.getAsJsonArray("drops");
      // validate the required field `drops` (array)
      for (int i = 0; i < jsonArraydrops.size(); i++) {
        DropRateSchema.validateJsonElement(jsonArraydrops.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonsterSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonsterSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonsterSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonsterSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<MonsterSchema>() {
           @Override
           public void write(JsonWriter out, MonsterSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonsterSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MonsterSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MonsterSchema
  * @throws IOException if the JSON string is invalid with respect to MonsterSchema
  */
  public static MonsterSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonsterSchema.class);
  }

 /**
  * Convert an instance of MonsterSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

