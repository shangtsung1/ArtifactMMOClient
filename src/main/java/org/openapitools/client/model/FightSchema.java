/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BlockedHitsSchema;
import org.openapitools.client.model.DropSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FightSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-09T17:40:21.793932300+10:00[Australia/Sydney]", comments = "Generator version: 7.6.0")
public class FightSchema {
  public static final String SERIALIZED_NAME_XP = "xp";
  @SerializedName(SERIALIZED_NAME_XP)
  private Integer xp;

  public static final String SERIALIZED_NAME_GOLD = "gold";
  @SerializedName(SERIALIZED_NAME_GOLD)
  private Integer gold;

  public static final String SERIALIZED_NAME_DROPS = "drops";
  @SerializedName(SERIALIZED_NAME_DROPS)
  private List<DropSchema> drops = new ArrayList<>();

  public static final String SERIALIZED_NAME_TURNS = "turns";
  @SerializedName(SERIALIZED_NAME_TURNS)
  private Integer turns;

  public static final String SERIALIZED_NAME_MONSTER_BLOCKED_HITS = "monster_blocked_hits";
  @SerializedName(SERIALIZED_NAME_MONSTER_BLOCKED_HITS)
  private BlockedHitsSchema monsterBlockedHits;

  public static final String SERIALIZED_NAME_PLAYER_BLOCKED_HITS = "player_blocked_hits";
  @SerializedName(SERIALIZED_NAME_PLAYER_BLOCKED_HITS)
  private BlockedHitsSchema playerBlockedHits;

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private List<String> logs = new ArrayList<>();

  /**
   * The result of the fight.
   */
  @JsonAdapter(ResultEnum.Adapter.class)
  public enum ResultEnum {
    WIN("win"),
    
    LOSE("lose");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultEnum fromValue(String value) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ResultEnum result;

  public FightSchema() {
  }

  public FightSchema xp(Integer xp) {
    this.xp = xp;
    return this;
  }

   /**
   * The amount of xp gained by the fight.
   * @return xp
  **/
  @javax.annotation.Nonnull
  public Integer getXp() {
    return xp;
  }

  public void setXp(Integer xp) {
    this.xp = xp;
  }


  public FightSchema gold(Integer gold) {
    this.gold = gold;
    return this;
  }

   /**
   * The amount of gold gained by the fight.
   * @return gold
  **/
  @javax.annotation.Nonnull
  public Integer getGold() {
    return gold;
  }

  public void setGold(Integer gold) {
    this.gold = gold;
  }


  public FightSchema drops(List<DropSchema> drops) {
    this.drops = drops;
    return this;
  }

  public FightSchema addDropsItem(DropSchema dropsItem) {
    if (this.drops == null) {
      this.drops = new ArrayList<>();
    }
    this.drops.add(dropsItem);
    return this;
  }

   /**
   * The items dropped by the fight.
   * @return drops
  **/
  @javax.annotation.Nonnull
  public List<DropSchema> getDrops() {
    return drops;
  }

  public void setDrops(List<DropSchema> drops) {
    this.drops = drops;
  }


  public FightSchema turns(Integer turns) {
    this.turns = turns;
    return this;
  }

   /**
   * Numbers of the turns of the combat.
   * @return turns
  **/
  @javax.annotation.Nonnull
  public Integer getTurns() {
    return turns;
  }

  public void setTurns(Integer turns) {
    this.turns = turns;
  }


  public FightSchema monsterBlockedHits(BlockedHitsSchema monsterBlockedHits) {
    this.monsterBlockedHits = monsterBlockedHits;
    return this;
  }

   /**
   * The amount of blocked hits by the monster.
   * @return monsterBlockedHits
  **/
  @javax.annotation.Nonnull
  public BlockedHitsSchema getMonsterBlockedHits() {
    return monsterBlockedHits;
  }

  public void setMonsterBlockedHits(BlockedHitsSchema monsterBlockedHits) {
    this.monsterBlockedHits = monsterBlockedHits;
  }


  public FightSchema playerBlockedHits(BlockedHitsSchema playerBlockedHits) {
    this.playerBlockedHits = playerBlockedHits;
    return this;
  }

   /**
   * The amount of blocked hits by the player.
   * @return playerBlockedHits
  **/
  @javax.annotation.Nonnull
  public BlockedHitsSchema getPlayerBlockedHits() {
    return playerBlockedHits;
  }

  public void setPlayerBlockedHits(BlockedHitsSchema playerBlockedHits) {
    this.playerBlockedHits = playerBlockedHits;
  }


  public FightSchema logs(List<String> logs) {
    this.logs = logs;
    return this;
  }

  public FightSchema addLogsItem(String logsItem) {
    if (this.logs == null) {
      this.logs = new ArrayList<>();
    }
    this.logs.add(logsItem);
    return this;
  }

   /**
   * The fight logs.
   * @return logs
  **/
  @javax.annotation.Nonnull
  public List<String> getLogs() {
    return logs;
  }

  public void setLogs(List<String> logs) {
    this.logs = logs;
  }


  public FightSchema result(ResultEnum result) {
    this.result = result;
    return this;
  }

   /**
   * The result of the fight.
   * @return result
  **/
  @javax.annotation.Nonnull
  public ResultEnum getResult() {
    return result;
  }

  public void setResult(ResultEnum result) {
    this.result = result;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FightSchema fightSchema = (FightSchema) o;
    return Objects.equals(this.xp, fightSchema.xp) &&
        Objects.equals(this.gold, fightSchema.gold) &&
        Objects.equals(this.drops, fightSchema.drops) &&
        Objects.equals(this.turns, fightSchema.turns) &&
        Objects.equals(this.monsterBlockedHits, fightSchema.monsterBlockedHits) &&
        Objects.equals(this.playerBlockedHits, fightSchema.playerBlockedHits) &&
        Objects.equals(this.logs, fightSchema.logs) &&
        Objects.equals(this.result, fightSchema.result);
  }

  @Override
  public int hashCode() {
    return Objects.hash(xp, gold, drops, turns, monsterBlockedHits, playerBlockedHits, logs, result);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FightSchema {\n");
    sb.append("    xp: ").append(toIndentedString(xp)).append("\n");
    sb.append("    gold: ").append(toIndentedString(gold)).append("\n");
    sb.append("    drops: ").append(toIndentedString(drops)).append("\n");
    sb.append("    turns: ").append(toIndentedString(turns)).append("\n");
    sb.append("    monsterBlockedHits: ").append(toIndentedString(monsterBlockedHits)).append("\n");
    sb.append("    playerBlockedHits: ").append(toIndentedString(playerBlockedHits)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("xp");
    openapiFields.add("gold");
    openapiFields.add("drops");
    openapiFields.add("turns");
    openapiFields.add("monster_blocked_hits");
    openapiFields.add("player_blocked_hits");
    openapiFields.add("logs");
    openapiFields.add("result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("xp");
    openapiRequiredFields.add("gold");
    openapiRequiredFields.add("drops");
    openapiRequiredFields.add("turns");
    openapiRequiredFields.add("monster_blocked_hits");
    openapiRequiredFields.add("player_blocked_hits");
    openapiRequiredFields.add("logs");
    openapiRequiredFields.add("result");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FightSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FightSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FightSchema is not found in the empty JSON string", FightSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FightSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FightSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FightSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("drops").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `drops` to be an array in the JSON string but got `%s`", jsonObj.get("drops").toString()));
      }

      JsonArray jsonArraydrops = jsonObj.getAsJsonArray("drops");
      // validate the required field `drops` (array)
      for (int i = 0; i < jsonArraydrops.size(); i++) {
        DropSchema.validateJsonElement(jsonArraydrops.get(i));
      };
      // validate the required field `monster_blocked_hits`
      BlockedHitsSchema.validateJsonElement(jsonObj.get("monster_blocked_hits"));
      // validate the required field `player_blocked_hits`
      BlockedHitsSchema.validateJsonElement(jsonObj.get("player_blocked_hits"));
      // ensure the required json array is present
      if (jsonObj.get("logs") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("logs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logs` to be an array in the JSON string but got `%s`", jsonObj.get("logs").toString()));
      }
      if (!jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      // validate the required field `result`
      ResultEnum.validateJsonElement(jsonObj.get("result"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FightSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FightSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FightSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FightSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<FightSchema>() {
           @Override
           public void write(JsonWriter out, FightSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FightSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FightSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FightSchema
  * @throws IOException if the JSON string is invalid with respect to FightSchema
  */
  public static FightSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FightSchema.class);
  }

 /**
  * Convert an instance of FightSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

