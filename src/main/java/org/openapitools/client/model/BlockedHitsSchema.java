/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BlockedHitsSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-09T17:40:21.793932300+10:00[Australia/Sydney]", comments = "Generator version: 7.6.0")
public class BlockedHitsSchema {
  public static final String SERIALIZED_NAME_FIRE = "fire";
  @SerializedName(SERIALIZED_NAME_FIRE)
  private Integer fire;

  public static final String SERIALIZED_NAME_EARTH = "earth";
  @SerializedName(SERIALIZED_NAME_EARTH)
  private Integer earth;

  public static final String SERIALIZED_NAME_WATER = "water";
  @SerializedName(SERIALIZED_NAME_WATER)
  private Integer water;

  public static final String SERIALIZED_NAME_AIR = "air";
  @SerializedName(SERIALIZED_NAME_AIR)
  private Integer air;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public BlockedHitsSchema() {
  }

  public BlockedHitsSchema fire(Integer fire) {
    this.fire = fire;
    return this;
  }

   /**
   * The amount of fire hits blocked.
   * @return fire
  **/
  @javax.annotation.Nonnull
  public Integer getFire() {
    return fire;
  }

  public void setFire(Integer fire) {
    this.fire = fire;
  }


  public BlockedHitsSchema earth(Integer earth) {
    this.earth = earth;
    return this;
  }

   /**
   * The amount of earth hits blocked.
   * @return earth
  **/
  @javax.annotation.Nonnull
  public Integer getEarth() {
    return earth;
  }

  public void setEarth(Integer earth) {
    this.earth = earth;
  }


  public BlockedHitsSchema water(Integer water) {
    this.water = water;
    return this;
  }

   /**
   * The amount of water hits blocked.
   * @return water
  **/
  @javax.annotation.Nonnull
  public Integer getWater() {
    return water;
  }

  public void setWater(Integer water) {
    this.water = water;
  }


  public BlockedHitsSchema air(Integer air) {
    this.air = air;
    return this;
  }

   /**
   * The amount of air hits blocked.
   * @return air
  **/
  @javax.annotation.Nonnull
  public Integer getAir() {
    return air;
  }

  public void setAir(Integer air) {
    this.air = air;
  }


  public BlockedHitsSchema total(Integer total) {
    this.total = total;
    return this;
  }

   /**
   * The amount of total hits blocked.
   * @return total
  **/
  @javax.annotation.Nonnull
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockedHitsSchema blockedHitsSchema = (BlockedHitsSchema) o;
    return Objects.equals(this.fire, blockedHitsSchema.fire) &&
        Objects.equals(this.earth, blockedHitsSchema.earth) &&
        Objects.equals(this.water, blockedHitsSchema.water) &&
        Objects.equals(this.air, blockedHitsSchema.air) &&
        Objects.equals(this.total, blockedHitsSchema.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fire, earth, water, air, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockedHitsSchema {\n");
    sb.append("    fire: ").append(toIndentedString(fire)).append("\n");
    sb.append("    earth: ").append(toIndentedString(earth)).append("\n");
    sb.append("    water: ").append(toIndentedString(water)).append("\n");
    sb.append("    air: ").append(toIndentedString(air)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fire");
    openapiFields.add("earth");
    openapiFields.add("water");
    openapiFields.add("air");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fire");
    openapiRequiredFields.add("earth");
    openapiRequiredFields.add("water");
    openapiRequiredFields.add("air");
    openapiRequiredFields.add("total");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BlockedHitsSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlockedHitsSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlockedHitsSchema is not found in the empty JSON string", BlockedHitsSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlockedHitsSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlockedHitsSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlockedHitsSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockedHitsSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockedHitsSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockedHitsSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockedHitsSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockedHitsSchema>() {
           @Override
           public void write(JsonWriter out, BlockedHitsSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockedHitsSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BlockedHitsSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BlockedHitsSchema
  * @throws IOException if the JSON string is invalid with respect to BlockedHitsSchema
  */
  public static BlockedHitsSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockedHitsSchema.class);
  }

 /**
  * Convert an instance of BlockedHitsSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

