/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InventorySlot;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CharacterSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-09T17:40:21.793932300+10:00[Australia/Sydney]", comments = "Generator version: 7.6.0")
public class CharacterSchema {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Character skin code.
   */
  @JsonAdapter(SkinEnum.Adapter.class)
  public enum SkinEnum {
    MEN1("men1"),
    
    MEN2("men2"),
    
    MEN3("men3"),
    
    WOMEN1("women1"),
    
    WOMEN2("women2"),
    
    WOMEN3("women3");

    private String value;

    SkinEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SkinEnum fromValue(String value) {
      for (SkinEnum b : SkinEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SkinEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SkinEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SkinEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SkinEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SkinEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SKIN = "skin";
  @SerializedName(SERIALIZED_NAME_SKIN)
  private SkinEnum skin;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_XP = "xp";
  @SerializedName(SERIALIZED_NAME_XP)
  private Integer xp;

  public static final String SERIALIZED_NAME_MAX_XP = "max_xp";
  @SerializedName(SERIALIZED_NAME_MAX_XP)
  private Integer maxXp;

  public static final String SERIALIZED_NAME_TOTAL_XP = "total_xp";
  @SerializedName(SERIALIZED_NAME_TOTAL_XP)
  private Integer totalXp;

  public static final String SERIALIZED_NAME_GOLD = "gold";
  @SerializedName(SERIALIZED_NAME_GOLD)
  private Integer gold;

  public static final String SERIALIZED_NAME_SPEED = "speed";
  @SerializedName(SERIALIZED_NAME_SPEED)
  private Integer speed;

  public static final String SERIALIZED_NAME_MINING_LEVEL = "mining_level";
  @SerializedName(SERIALIZED_NAME_MINING_LEVEL)
  private Integer miningLevel;

  public static final String SERIALIZED_NAME_MINING_XP = "mining_xp";
  @SerializedName(SERIALIZED_NAME_MINING_XP)
  private Integer miningXp;

  public static final String SERIALIZED_NAME_MINING_MAX_XP = "mining_max_xp";
  @SerializedName(SERIALIZED_NAME_MINING_MAX_XP)
  private Integer miningMaxXp;

  public static final String SERIALIZED_NAME_WOODCUTTING_LEVEL = "woodcutting_level";
  @SerializedName(SERIALIZED_NAME_WOODCUTTING_LEVEL)
  private Integer woodcuttingLevel;

  public static final String SERIALIZED_NAME_WOODCUTTING_XP = "woodcutting_xp";
  @SerializedName(SERIALIZED_NAME_WOODCUTTING_XP)
  private Integer woodcuttingXp;

  public static final String SERIALIZED_NAME_WOODCUTTING_MAX_XP = "woodcutting_max_xp";
  @SerializedName(SERIALIZED_NAME_WOODCUTTING_MAX_XP)
  private Integer woodcuttingMaxXp;

  public static final String SERIALIZED_NAME_FISHING_LEVEL = "fishing_level";
  @SerializedName(SERIALIZED_NAME_FISHING_LEVEL)
  private Integer fishingLevel;

  public static final String SERIALIZED_NAME_FISHING_XP = "fishing_xp";
  @SerializedName(SERIALIZED_NAME_FISHING_XP)
  private Integer fishingXp;

  public static final String SERIALIZED_NAME_FISHING_MAX_XP = "fishing_max_xp";
  @SerializedName(SERIALIZED_NAME_FISHING_MAX_XP)
  private Integer fishingMaxXp;

  public static final String SERIALIZED_NAME_WEAPONCRAFTING_LEVEL = "weaponcrafting_level";
  @SerializedName(SERIALIZED_NAME_WEAPONCRAFTING_LEVEL)
  private Integer weaponcraftingLevel;

  public static final String SERIALIZED_NAME_WEAPONCRAFTING_XP = "weaponcrafting_xp";
  @SerializedName(SERIALIZED_NAME_WEAPONCRAFTING_XP)
  private Integer weaponcraftingXp;

  public static final String SERIALIZED_NAME_WEAPONCRAFTING_MAX_XP = "weaponcrafting_max_xp";
  @SerializedName(SERIALIZED_NAME_WEAPONCRAFTING_MAX_XP)
  private Integer weaponcraftingMaxXp;

  public static final String SERIALIZED_NAME_GEARCRAFTING_LEVEL = "gearcrafting_level";
  @SerializedName(SERIALIZED_NAME_GEARCRAFTING_LEVEL)
  private Integer gearcraftingLevel;

  public static final String SERIALIZED_NAME_GEARCRAFTING_XP = "gearcrafting_xp";
  @SerializedName(SERIALIZED_NAME_GEARCRAFTING_XP)
  private Integer gearcraftingXp;

  public static final String SERIALIZED_NAME_GEARCRAFTING_MAX_XP = "gearcrafting_max_xp";
  @SerializedName(SERIALIZED_NAME_GEARCRAFTING_MAX_XP)
  private Integer gearcraftingMaxXp;

  public static final String SERIALIZED_NAME_JEWELRYCRAFTING_LEVEL = "jewelrycrafting_level";
  @SerializedName(SERIALIZED_NAME_JEWELRYCRAFTING_LEVEL)
  private Integer jewelrycraftingLevel;

  public static final String SERIALIZED_NAME_JEWELRYCRAFTING_XP = "jewelrycrafting_xp";
  @SerializedName(SERIALIZED_NAME_JEWELRYCRAFTING_XP)
  private Integer jewelrycraftingXp;

  public static final String SERIALIZED_NAME_JEWELRYCRAFTING_MAX_XP = "jewelrycrafting_max_xp";
  @SerializedName(SERIALIZED_NAME_JEWELRYCRAFTING_MAX_XP)
  private Integer jewelrycraftingMaxXp;

  public static final String SERIALIZED_NAME_COOKING_LEVEL = "cooking_level";
  @SerializedName(SERIALIZED_NAME_COOKING_LEVEL)
  private Integer cookingLevel;

  public static final String SERIALIZED_NAME_COOKING_XP = "cooking_xp";
  @SerializedName(SERIALIZED_NAME_COOKING_XP)
  private Integer cookingXp;

  public static final String SERIALIZED_NAME_COOKING_MAX_XP = "cooking_max_xp";
  @SerializedName(SERIALIZED_NAME_COOKING_MAX_XP)
  private Integer cookingMaxXp;

  public static final String SERIALIZED_NAME_HP = "hp";
  @SerializedName(SERIALIZED_NAME_HP)
  private Integer hp;

  public static final String SERIALIZED_NAME_HASTE = "haste";
  @SerializedName(SERIALIZED_NAME_HASTE)
  private Integer haste;

  public static final String SERIALIZED_NAME_CRITICAL_STRIKE = "critical_strike";
  @SerializedName(SERIALIZED_NAME_CRITICAL_STRIKE)
  private Integer criticalStrike;

  public static final String SERIALIZED_NAME_STAMINA = "stamina";
  @SerializedName(SERIALIZED_NAME_STAMINA)
  private Integer stamina;

  public static final String SERIALIZED_NAME_ATTACK_FIRE = "attack_fire";
  @SerializedName(SERIALIZED_NAME_ATTACK_FIRE)
  private Integer attackFire;

  public static final String SERIALIZED_NAME_ATTACK_EARTH = "attack_earth";
  @SerializedName(SERIALIZED_NAME_ATTACK_EARTH)
  private Integer attackEarth;

  public static final String SERIALIZED_NAME_ATTACK_WATER = "attack_water";
  @SerializedName(SERIALIZED_NAME_ATTACK_WATER)
  private Integer attackWater;

  public static final String SERIALIZED_NAME_ATTACK_AIR = "attack_air";
  @SerializedName(SERIALIZED_NAME_ATTACK_AIR)
  private Integer attackAir;

  public static final String SERIALIZED_NAME_DMG_FIRE = "dmg_fire";
  @SerializedName(SERIALIZED_NAME_DMG_FIRE)
  private Integer dmgFire;

  public static final String SERIALIZED_NAME_DMG_EARTH = "dmg_earth";
  @SerializedName(SERIALIZED_NAME_DMG_EARTH)
  private Integer dmgEarth;

  public static final String SERIALIZED_NAME_DMG_WATER = "dmg_water";
  @SerializedName(SERIALIZED_NAME_DMG_WATER)
  private Integer dmgWater;

  public static final String SERIALIZED_NAME_DMG_AIR = "dmg_air";
  @SerializedName(SERIALIZED_NAME_DMG_AIR)
  private Integer dmgAir;

  public static final String SERIALIZED_NAME_RES_FIRE = "res_fire";
  @SerializedName(SERIALIZED_NAME_RES_FIRE)
  private Integer resFire;

  public static final String SERIALIZED_NAME_RES_EARTH = "res_earth";
  @SerializedName(SERIALIZED_NAME_RES_EARTH)
  private Integer resEarth;

  public static final String SERIALIZED_NAME_RES_WATER = "res_water";
  @SerializedName(SERIALIZED_NAME_RES_WATER)
  private Integer resWater;

  public static final String SERIALIZED_NAME_RES_AIR = "res_air";
  @SerializedName(SERIALIZED_NAME_RES_AIR)
  private Integer resAir;

  public static final String SERIALIZED_NAME_X = "x";
  @SerializedName(SERIALIZED_NAME_X)
  private Integer x;

  public static final String SERIALIZED_NAME_Y = "y";
  @SerializedName(SERIALIZED_NAME_Y)
  private Integer y;

  public static final String SERIALIZED_NAME_COOLDOWN = "cooldown";
  @SerializedName(SERIALIZED_NAME_COOLDOWN)
  private Integer cooldown;

  public static final String SERIALIZED_NAME_COOLDOWN_EXPIRATION = "cooldown_expiration";
  @SerializedName(SERIALIZED_NAME_COOLDOWN_EXPIRATION)
  private OffsetDateTime cooldownExpiration;

  public static final String SERIALIZED_NAME_WEAPON_SLOT = "weapon_slot";
  @SerializedName(SERIALIZED_NAME_WEAPON_SLOT)
  private String weaponSlot;

  public static final String SERIALIZED_NAME_SHIELD_SLOT = "shield_slot";
  @SerializedName(SERIALIZED_NAME_SHIELD_SLOT)
  private String shieldSlot;

  public static final String SERIALIZED_NAME_HELMET_SLOT = "helmet_slot";
  @SerializedName(SERIALIZED_NAME_HELMET_SLOT)
  private String helmetSlot;

  public static final String SERIALIZED_NAME_BODY_ARMOR_SLOT = "body_armor_slot";
  @SerializedName(SERIALIZED_NAME_BODY_ARMOR_SLOT)
  private String bodyArmorSlot;

  public static final String SERIALIZED_NAME_LEG_ARMOR_SLOT = "leg_armor_slot";
  @SerializedName(SERIALIZED_NAME_LEG_ARMOR_SLOT)
  private String legArmorSlot;

  public static final String SERIALIZED_NAME_BOOTS_SLOT = "boots_slot";
  @SerializedName(SERIALIZED_NAME_BOOTS_SLOT)
  private String bootsSlot;

  public static final String SERIALIZED_NAME_RING1_SLOT = "ring1_slot";
  @SerializedName(SERIALIZED_NAME_RING1_SLOT)
  private String ring1Slot;

  public static final String SERIALIZED_NAME_RING2_SLOT = "ring2_slot";
  @SerializedName(SERIALIZED_NAME_RING2_SLOT)
  private String ring2Slot;

  public static final String SERIALIZED_NAME_AMULET_SLOT = "amulet_slot";
  @SerializedName(SERIALIZED_NAME_AMULET_SLOT)
  private String amuletSlot;

  public static final String SERIALIZED_NAME_ARTIFACT1_SLOT = "artifact1_slot";
  @SerializedName(SERIALIZED_NAME_ARTIFACT1_SLOT)
  private String artifact1Slot;

  public static final String SERIALIZED_NAME_ARTIFACT2_SLOT = "artifact2_slot";
  @SerializedName(SERIALIZED_NAME_ARTIFACT2_SLOT)
  private String artifact2Slot;

  public static final String SERIALIZED_NAME_ARTIFACT3_SLOT = "artifact3_slot";
  @SerializedName(SERIALIZED_NAME_ARTIFACT3_SLOT)
  private String artifact3Slot;

  public static final String SERIALIZED_NAME_CONSUMABLE1_SLOT = "consumable1_slot";
  @SerializedName(SERIALIZED_NAME_CONSUMABLE1_SLOT)
  private String consumable1Slot;

  public static final String SERIALIZED_NAME_CONSUMABLE1_SLOT_QUANTITY = "consumable1_slot_quantity";
  @SerializedName(SERIALIZED_NAME_CONSUMABLE1_SLOT_QUANTITY)
  private Integer consumable1SlotQuantity;

  public static final String SERIALIZED_NAME_CONSUMABLE2_SLOT = "consumable2_slot";
  @SerializedName(SERIALIZED_NAME_CONSUMABLE2_SLOT)
  private String consumable2Slot;

  public static final String SERIALIZED_NAME_CONSUMABLE2_SLOT_QUANTITY = "consumable2_slot_quantity";
  @SerializedName(SERIALIZED_NAME_CONSUMABLE2_SLOT_QUANTITY)
  private Integer consumable2SlotQuantity;

  public static final String SERIALIZED_NAME_TASK = "task";
  @SerializedName(SERIALIZED_NAME_TASK)
  private String task;

  public static final String SERIALIZED_NAME_TASK_TYPE = "task_type";
  @SerializedName(SERIALIZED_NAME_TASK_TYPE)
  private String taskType;

  public static final String SERIALIZED_NAME_TASK_PROGRESS = "task_progress";
  @SerializedName(SERIALIZED_NAME_TASK_PROGRESS)
  private Integer taskProgress;

  public static final String SERIALIZED_NAME_TASK_TOTAL = "task_total";
  @SerializedName(SERIALIZED_NAME_TASK_TOTAL)
  private Integer taskTotal;

  public static final String SERIALIZED_NAME_INVENTORY_MAX_ITEMS = "inventory_max_items";
  @SerializedName(SERIALIZED_NAME_INVENTORY_MAX_ITEMS)
  private Integer inventoryMaxItems;

  public static final String SERIALIZED_NAME_INVENTORY = "inventory";
  @SerializedName(SERIALIZED_NAME_INVENTORY)
  private List<InventorySlot> inventory = new ArrayList<>();

  public CharacterSchema() {
  }

  public CharacterSchema name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the character.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CharacterSchema skin(SkinEnum skin) {
    this.skin = skin;
    return this;
  }

   /**
   * Character skin code.
   * @return skin
  **/
  @javax.annotation.Nonnull
  public SkinEnum getSkin() {
    return skin;
  }

  public void setSkin(SkinEnum skin) {
    this.skin = skin;
  }


  public CharacterSchema level(Integer level) {
    this.level = level;
    return this;
  }

   /**
   * Combat level.
   * @return level
  **/
  @javax.annotation.Nonnull
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public CharacterSchema xp(Integer xp) {
    this.xp = xp;
    return this;
  }

   /**
   * The current xp level of the combat level.
   * @return xp
  **/
  @javax.annotation.Nonnull
  public Integer getXp() {
    return xp;
  }

  public void setXp(Integer xp) {
    this.xp = xp;
  }


  public CharacterSchema maxXp(Integer maxXp) {
    this.maxXp = maxXp;
    return this;
  }

   /**
   * XP required to level up the character.
   * @return maxXp
  **/
  @javax.annotation.Nonnull
  public Integer getMaxXp() {
    return maxXp;
  }

  public void setMaxXp(Integer maxXp) {
    this.maxXp = maxXp;
  }


  public CharacterSchema totalXp(Integer totalXp) {
    this.totalXp = totalXp;
    return this;
  }

   /**
   * Total XP of your character.
   * @return totalXp
  **/
  @javax.annotation.Nonnull
  public Integer getTotalXp() {
    return totalXp;
  }

  public void setTotalXp(Integer totalXp) {
    this.totalXp = totalXp;
  }


  public CharacterSchema gold(Integer gold) {
    this.gold = gold;
    return this;
  }

   /**
   * The numbers of golds on this character.
   * @return gold
  **/
  @javax.annotation.Nonnull
  public Integer getGold() {
    return gold;
  }

  public void setGold(Integer gold) {
    this.gold = gold;
  }


  public CharacterSchema speed(Integer speed) {
    this.speed = speed;
    return this;
  }

   /**
   * *Not available, on the roadmap. Character movement speed.
   * @return speed
  **/
  @javax.annotation.Nonnull
  public Integer getSpeed() {
    return speed;
  }

  public void setSpeed(Integer speed) {
    this.speed = speed;
  }


  public CharacterSchema miningLevel(Integer miningLevel) {
    this.miningLevel = miningLevel;
    return this;
  }

   /**
   * Mining level.
   * @return miningLevel
  **/
  @javax.annotation.Nonnull
  public Integer getMiningLevel() {
    return miningLevel;
  }

  public void setMiningLevel(Integer miningLevel) {
    this.miningLevel = miningLevel;
  }


  public CharacterSchema miningXp(Integer miningXp) {
    this.miningXp = miningXp;
    return this;
  }

   /**
   * The current xp level of the Mining skill.
   * @return miningXp
  **/
  @javax.annotation.Nonnull
  public Integer getMiningXp() {
    return miningXp;
  }

  public void setMiningXp(Integer miningXp) {
    this.miningXp = miningXp;
  }


  public CharacterSchema miningMaxXp(Integer miningMaxXp) {
    this.miningMaxXp = miningMaxXp;
    return this;
  }

   /**
   * Mining XP required to level up the skill.
   * @return miningMaxXp
  **/
  @javax.annotation.Nonnull
  public Integer getMiningMaxXp() {
    return miningMaxXp;
  }

  public void setMiningMaxXp(Integer miningMaxXp) {
    this.miningMaxXp = miningMaxXp;
  }


  public CharacterSchema woodcuttingLevel(Integer woodcuttingLevel) {
    this.woodcuttingLevel = woodcuttingLevel;
    return this;
  }

   /**
   * Woodcutting level.
   * @return woodcuttingLevel
  **/
  @javax.annotation.Nonnull
  public Integer getWoodcuttingLevel() {
    return woodcuttingLevel;
  }

  public void setWoodcuttingLevel(Integer woodcuttingLevel) {
    this.woodcuttingLevel = woodcuttingLevel;
  }


  public CharacterSchema woodcuttingXp(Integer woodcuttingXp) {
    this.woodcuttingXp = woodcuttingXp;
    return this;
  }

   /**
   * The current xp level of the Woodcutting skill.
   * @return woodcuttingXp
  **/
  @javax.annotation.Nonnull
  public Integer getWoodcuttingXp() {
    return woodcuttingXp;
  }

  public void setWoodcuttingXp(Integer woodcuttingXp) {
    this.woodcuttingXp = woodcuttingXp;
  }


  public CharacterSchema woodcuttingMaxXp(Integer woodcuttingMaxXp) {
    this.woodcuttingMaxXp = woodcuttingMaxXp;
    return this;
  }

   /**
   * Woodcutting XP required to level up the skill.
   * @return woodcuttingMaxXp
  **/
  @javax.annotation.Nonnull
  public Integer getWoodcuttingMaxXp() {
    return woodcuttingMaxXp;
  }

  public void setWoodcuttingMaxXp(Integer woodcuttingMaxXp) {
    this.woodcuttingMaxXp = woodcuttingMaxXp;
  }


  public CharacterSchema fishingLevel(Integer fishingLevel) {
    this.fishingLevel = fishingLevel;
    return this;
  }

   /**
   * Fishing level.
   * @return fishingLevel
  **/
  @javax.annotation.Nonnull
  public Integer getFishingLevel() {
    return fishingLevel;
  }

  public void setFishingLevel(Integer fishingLevel) {
    this.fishingLevel = fishingLevel;
  }


  public CharacterSchema fishingXp(Integer fishingXp) {
    this.fishingXp = fishingXp;
    return this;
  }

   /**
   * The current xp level of the Fishing skill.
   * @return fishingXp
  **/
  @javax.annotation.Nonnull
  public Integer getFishingXp() {
    return fishingXp;
  }

  public void setFishingXp(Integer fishingXp) {
    this.fishingXp = fishingXp;
  }


  public CharacterSchema fishingMaxXp(Integer fishingMaxXp) {
    this.fishingMaxXp = fishingMaxXp;
    return this;
  }

   /**
   * Fishing XP required to level up the skill.
   * @return fishingMaxXp
  **/
  @javax.annotation.Nonnull
  public Integer getFishingMaxXp() {
    return fishingMaxXp;
  }

  public void setFishingMaxXp(Integer fishingMaxXp) {
    this.fishingMaxXp = fishingMaxXp;
  }


  public CharacterSchema weaponcraftingLevel(Integer weaponcraftingLevel) {
    this.weaponcraftingLevel = weaponcraftingLevel;
    return this;
  }

   /**
   * Weaponcrafting level.
   * @return weaponcraftingLevel
  **/
  @javax.annotation.Nonnull
  public Integer getWeaponcraftingLevel() {
    return weaponcraftingLevel;
  }

  public void setWeaponcraftingLevel(Integer weaponcraftingLevel) {
    this.weaponcraftingLevel = weaponcraftingLevel;
  }


  public CharacterSchema weaponcraftingXp(Integer weaponcraftingXp) {
    this.weaponcraftingXp = weaponcraftingXp;
    return this;
  }

   /**
   * The current xp level of the Weaponcrafting skill.
   * @return weaponcraftingXp
  **/
  @javax.annotation.Nonnull
  public Integer getWeaponcraftingXp() {
    return weaponcraftingXp;
  }

  public void setWeaponcraftingXp(Integer weaponcraftingXp) {
    this.weaponcraftingXp = weaponcraftingXp;
  }


  public CharacterSchema weaponcraftingMaxXp(Integer weaponcraftingMaxXp) {
    this.weaponcraftingMaxXp = weaponcraftingMaxXp;
    return this;
  }

   /**
   * Weaponcrafting XP required to level up the skill.
   * @return weaponcraftingMaxXp
  **/
  @javax.annotation.Nonnull
  public Integer getWeaponcraftingMaxXp() {
    return weaponcraftingMaxXp;
  }

  public void setWeaponcraftingMaxXp(Integer weaponcraftingMaxXp) {
    this.weaponcraftingMaxXp = weaponcraftingMaxXp;
  }


  public CharacterSchema gearcraftingLevel(Integer gearcraftingLevel) {
    this.gearcraftingLevel = gearcraftingLevel;
    return this;
  }

   /**
   * Gearcrafting level.
   * @return gearcraftingLevel
  **/
  @javax.annotation.Nonnull
  public Integer getGearcraftingLevel() {
    return gearcraftingLevel;
  }

  public void setGearcraftingLevel(Integer gearcraftingLevel) {
    this.gearcraftingLevel = gearcraftingLevel;
  }


  public CharacterSchema gearcraftingXp(Integer gearcraftingXp) {
    this.gearcraftingXp = gearcraftingXp;
    return this;
  }

   /**
   * The current xp level of the Gearcrafting skill.
   * @return gearcraftingXp
  **/
  @javax.annotation.Nonnull
  public Integer getGearcraftingXp() {
    return gearcraftingXp;
  }

  public void setGearcraftingXp(Integer gearcraftingXp) {
    this.gearcraftingXp = gearcraftingXp;
  }


  public CharacterSchema gearcraftingMaxXp(Integer gearcraftingMaxXp) {
    this.gearcraftingMaxXp = gearcraftingMaxXp;
    return this;
  }

   /**
   * Gearcrafting XP required to level up the skill.
   * @return gearcraftingMaxXp
  **/
  @javax.annotation.Nonnull
  public Integer getGearcraftingMaxXp() {
    return gearcraftingMaxXp;
  }

  public void setGearcraftingMaxXp(Integer gearcraftingMaxXp) {
    this.gearcraftingMaxXp = gearcraftingMaxXp;
  }


  public CharacterSchema jewelrycraftingLevel(Integer jewelrycraftingLevel) {
    this.jewelrycraftingLevel = jewelrycraftingLevel;
    return this;
  }

   /**
   * Jewelrycrafting level.
   * @return jewelrycraftingLevel
  **/
  @javax.annotation.Nonnull
  public Integer getJewelrycraftingLevel() {
    return jewelrycraftingLevel;
  }

  public void setJewelrycraftingLevel(Integer jewelrycraftingLevel) {
    this.jewelrycraftingLevel = jewelrycraftingLevel;
  }


  public CharacterSchema jewelrycraftingXp(Integer jewelrycraftingXp) {
    this.jewelrycraftingXp = jewelrycraftingXp;
    return this;
  }

   /**
   * The current xp level of the Jewelrycrafting skill.
   * @return jewelrycraftingXp
  **/
  @javax.annotation.Nonnull
  public Integer getJewelrycraftingXp() {
    return jewelrycraftingXp;
  }

  public void setJewelrycraftingXp(Integer jewelrycraftingXp) {
    this.jewelrycraftingXp = jewelrycraftingXp;
  }


  public CharacterSchema jewelrycraftingMaxXp(Integer jewelrycraftingMaxXp) {
    this.jewelrycraftingMaxXp = jewelrycraftingMaxXp;
    return this;
  }

   /**
   * Jewelrycrafting XP required to level up the skill.
   * @return jewelrycraftingMaxXp
  **/
  @javax.annotation.Nonnull
  public Integer getJewelrycraftingMaxXp() {
    return jewelrycraftingMaxXp;
  }

  public void setJewelrycraftingMaxXp(Integer jewelrycraftingMaxXp) {
    this.jewelrycraftingMaxXp = jewelrycraftingMaxXp;
  }


  public CharacterSchema cookingLevel(Integer cookingLevel) {
    this.cookingLevel = cookingLevel;
    return this;
  }

   /**
   * The current xp level of the Cooking skill.
   * @return cookingLevel
  **/
  @javax.annotation.Nonnull
  public Integer getCookingLevel() {
    return cookingLevel;
  }

  public void setCookingLevel(Integer cookingLevel) {
    this.cookingLevel = cookingLevel;
  }


  public CharacterSchema cookingXp(Integer cookingXp) {
    this.cookingXp = cookingXp;
    return this;
  }

   /**
   * Cooking XP.
   * @return cookingXp
  **/
  @javax.annotation.Nonnull
  public Integer getCookingXp() {
    return cookingXp;
  }

  public void setCookingXp(Integer cookingXp) {
    this.cookingXp = cookingXp;
  }


  public CharacterSchema cookingMaxXp(Integer cookingMaxXp) {
    this.cookingMaxXp = cookingMaxXp;
    return this;
  }

   /**
   * Cooking XP required to level up the skill.
   * @return cookingMaxXp
  **/
  @javax.annotation.Nonnull
  public Integer getCookingMaxXp() {
    return cookingMaxXp;
  }

  public void setCookingMaxXp(Integer cookingMaxXp) {
    this.cookingMaxXp = cookingMaxXp;
  }


  public CharacterSchema hp(Integer hp) {
    this.hp = hp;
    return this;
  }

   /**
   * Character HP.
   * @return hp
  **/
  @javax.annotation.Nonnull
  public Integer getHp() {
    return hp;
  }

  public void setHp(Integer hp) {
    this.hp = hp;
  }


  public CharacterSchema haste(Integer haste) {
    this.haste = haste;
    return this;
  }

   /**
   * *Character Haste. Increase speed attack (reduce fight cooldown)
   * @return haste
  **/
  @javax.annotation.Nonnull
  public Integer getHaste() {
    return haste;
  }

  public void setHaste(Integer haste) {
    this.haste = haste;
  }


  public CharacterSchema criticalStrike(Integer criticalStrike) {
    this.criticalStrike = criticalStrike;
    return this;
  }

   /**
   * *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the attack&#39;s damage.
   * @return criticalStrike
  **/
  @javax.annotation.Nonnull
  public Integer getCriticalStrike() {
    return criticalStrike;
  }

  public void setCriticalStrike(Integer criticalStrike) {
    this.criticalStrike = criticalStrike;
  }


  public CharacterSchema stamina(Integer stamina) {
    this.stamina = stamina;
    return this;
  }

   /**
   * *Not available, on the roadmap. Regenerates life at the start of each turn.
   * @return stamina
  **/
  @javax.annotation.Nonnull
  public Integer getStamina() {
    return stamina;
  }

  public void setStamina(Integer stamina) {
    this.stamina = stamina;
  }


  public CharacterSchema attackFire(Integer attackFire) {
    this.attackFire = attackFire;
    return this;
  }

   /**
   * Fire attack.
   * @return attackFire
  **/
  @javax.annotation.Nonnull
  public Integer getAttackFire() {
    return attackFire;
  }

  public void setAttackFire(Integer attackFire) {
    this.attackFire = attackFire;
  }


  public CharacterSchema attackEarth(Integer attackEarth) {
    this.attackEarth = attackEarth;
    return this;
  }

   /**
   * Earth attack.
   * @return attackEarth
  **/
  @javax.annotation.Nonnull
  public Integer getAttackEarth() {
    return attackEarth;
  }

  public void setAttackEarth(Integer attackEarth) {
    this.attackEarth = attackEarth;
  }


  public CharacterSchema attackWater(Integer attackWater) {
    this.attackWater = attackWater;
    return this;
  }

   /**
   * Water attack.
   * @return attackWater
  **/
  @javax.annotation.Nonnull
  public Integer getAttackWater() {
    return attackWater;
  }

  public void setAttackWater(Integer attackWater) {
    this.attackWater = attackWater;
  }


  public CharacterSchema attackAir(Integer attackAir) {
    this.attackAir = attackAir;
    return this;
  }

   /**
   * Air attack.
   * @return attackAir
  **/
  @javax.annotation.Nonnull
  public Integer getAttackAir() {
    return attackAir;
  }

  public void setAttackAir(Integer attackAir) {
    this.attackAir = attackAir;
  }


  public CharacterSchema dmgFire(Integer dmgFire) {
    this.dmgFire = dmgFire;
    return this;
  }

   /**
   * % Fire damage.
   * @return dmgFire
  **/
  @javax.annotation.Nonnull
  public Integer getDmgFire() {
    return dmgFire;
  }

  public void setDmgFire(Integer dmgFire) {
    this.dmgFire = dmgFire;
  }


  public CharacterSchema dmgEarth(Integer dmgEarth) {
    this.dmgEarth = dmgEarth;
    return this;
  }

   /**
   * % Earth damage.
   * @return dmgEarth
  **/
  @javax.annotation.Nonnull
  public Integer getDmgEarth() {
    return dmgEarth;
  }

  public void setDmgEarth(Integer dmgEarth) {
    this.dmgEarth = dmgEarth;
  }


  public CharacterSchema dmgWater(Integer dmgWater) {
    this.dmgWater = dmgWater;
    return this;
  }

   /**
   * % Water damage.
   * @return dmgWater
  **/
  @javax.annotation.Nonnull
  public Integer getDmgWater() {
    return dmgWater;
  }

  public void setDmgWater(Integer dmgWater) {
    this.dmgWater = dmgWater;
  }


  public CharacterSchema dmgAir(Integer dmgAir) {
    this.dmgAir = dmgAir;
    return this;
  }

   /**
   * % Air damage.
   * @return dmgAir
  **/
  @javax.annotation.Nonnull
  public Integer getDmgAir() {
    return dmgAir;
  }

  public void setDmgAir(Integer dmgAir) {
    this.dmgAir = dmgAir;
  }


  public CharacterSchema resFire(Integer resFire) {
    this.resFire = resFire;
    return this;
  }

   /**
   * % Fire resistance.
   * @return resFire
  **/
  @javax.annotation.Nonnull
  public Integer getResFire() {
    return resFire;
  }

  public void setResFire(Integer resFire) {
    this.resFire = resFire;
  }


  public CharacterSchema resEarth(Integer resEarth) {
    this.resEarth = resEarth;
    return this;
  }

   /**
   * % Earth resistance.
   * @return resEarth
  **/
  @javax.annotation.Nonnull
  public Integer getResEarth() {
    return resEarth;
  }

  public void setResEarth(Integer resEarth) {
    this.resEarth = resEarth;
  }


  public CharacterSchema resWater(Integer resWater) {
    this.resWater = resWater;
    return this;
  }

   /**
   * % Water resistance.
   * @return resWater
  **/
  @javax.annotation.Nonnull
  public Integer getResWater() {
    return resWater;
  }

  public void setResWater(Integer resWater) {
    this.resWater = resWater;
  }


  public CharacterSchema resAir(Integer resAir) {
    this.resAir = resAir;
    return this;
  }

   /**
   * % Air resistance.
   * @return resAir
  **/
  @javax.annotation.Nonnull
  public Integer getResAir() {
    return resAir;
  }

  public void setResAir(Integer resAir) {
    this.resAir = resAir;
  }


  public CharacterSchema x(Integer x) {
    this.x = x;
    return this;
  }

   /**
   * Character x coordinate.
   * @return x
  **/
  @javax.annotation.Nonnull
  public Integer getX() {
    return x;
  }

  public void setX(Integer x) {
    this.x = x;
  }


  public CharacterSchema y(Integer y) {
    this.y = y;
    return this;
  }

   /**
   * Character y coordinate.
   * @return y
  **/
  @javax.annotation.Nonnull
  public Integer getY() {
    return y;
  }

  public void setY(Integer y) {
    this.y = y;
  }


  public CharacterSchema cooldown(Integer cooldown) {
    this.cooldown = cooldown;
    return this;
  }

   /**
   * Cooldown in seconds.
   * @return cooldown
  **/
  @javax.annotation.Nonnull
  public Integer getCooldown() {
    return cooldown;
  }

  public void setCooldown(Integer cooldown) {
    this.cooldown = cooldown;
  }


  public CharacterSchema cooldownExpiration(OffsetDateTime cooldownExpiration) {
    this.cooldownExpiration = cooldownExpiration;
    return this;
  }

   /**
   * Datetime Cooldown expiration.
   * @return cooldownExpiration
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCooldownExpiration() {
    return cooldownExpiration;
  }

  public void setCooldownExpiration(OffsetDateTime cooldownExpiration) {
    this.cooldownExpiration = cooldownExpiration;
  }


  public CharacterSchema weaponSlot(String weaponSlot) {
    this.weaponSlot = weaponSlot;
    return this;
  }

   /**
   * Weapon slot.
   * @return weaponSlot
  **/
  @javax.annotation.Nonnull
  public String getWeaponSlot() {
    return weaponSlot;
  }

  public void setWeaponSlot(String weaponSlot) {
    this.weaponSlot = weaponSlot;
  }


  public CharacterSchema shieldSlot(String shieldSlot) {
    this.shieldSlot = shieldSlot;
    return this;
  }

   /**
   * Shield slot.
   * @return shieldSlot
  **/
  @javax.annotation.Nonnull
  public String getShieldSlot() {
    return shieldSlot;
  }

  public void setShieldSlot(String shieldSlot) {
    this.shieldSlot = shieldSlot;
  }


  public CharacterSchema helmetSlot(String helmetSlot) {
    this.helmetSlot = helmetSlot;
    return this;
  }

   /**
   * Helmet slot.
   * @return helmetSlot
  **/
  @javax.annotation.Nonnull
  public String getHelmetSlot() {
    return helmetSlot;
  }

  public void setHelmetSlot(String helmetSlot) {
    this.helmetSlot = helmetSlot;
  }


  public CharacterSchema bodyArmorSlot(String bodyArmorSlot) {
    this.bodyArmorSlot = bodyArmorSlot;
    return this;
  }

   /**
   * Body armor slot.
   * @return bodyArmorSlot
  **/
  @javax.annotation.Nonnull
  public String getBodyArmorSlot() {
    return bodyArmorSlot;
  }

  public void setBodyArmorSlot(String bodyArmorSlot) {
    this.bodyArmorSlot = bodyArmorSlot;
  }


  public CharacterSchema legArmorSlot(String legArmorSlot) {
    this.legArmorSlot = legArmorSlot;
    return this;
  }

   /**
   * Leg armor slot.
   * @return legArmorSlot
  **/
  @javax.annotation.Nonnull
  public String getLegArmorSlot() {
    return legArmorSlot;
  }

  public void setLegArmorSlot(String legArmorSlot) {
    this.legArmorSlot = legArmorSlot;
  }


  public CharacterSchema bootsSlot(String bootsSlot) {
    this.bootsSlot = bootsSlot;
    return this;
  }

   /**
   * Boots slot.
   * @return bootsSlot
  **/
  @javax.annotation.Nonnull
  public String getBootsSlot() {
    return bootsSlot;
  }

  public void setBootsSlot(String bootsSlot) {
    this.bootsSlot = bootsSlot;
  }


  public CharacterSchema ring1Slot(String ring1Slot) {
    this.ring1Slot = ring1Slot;
    return this;
  }

   /**
   * Ring 1 slot.
   * @return ring1Slot
  **/
  @javax.annotation.Nonnull
  public String getRing1Slot() {
    return ring1Slot;
  }

  public void setRing1Slot(String ring1Slot) {
    this.ring1Slot = ring1Slot;
  }


  public CharacterSchema ring2Slot(String ring2Slot) {
    this.ring2Slot = ring2Slot;
    return this;
  }

   /**
   * Ring 2 slot.
   * @return ring2Slot
  **/
  @javax.annotation.Nonnull
  public String getRing2Slot() {
    return ring2Slot;
  }

  public void setRing2Slot(String ring2Slot) {
    this.ring2Slot = ring2Slot;
  }


  public CharacterSchema amuletSlot(String amuletSlot) {
    this.amuletSlot = amuletSlot;
    return this;
  }

   /**
   * Amulet slot.
   * @return amuletSlot
  **/
  @javax.annotation.Nonnull
  public String getAmuletSlot() {
    return amuletSlot;
  }

  public void setAmuletSlot(String amuletSlot) {
    this.amuletSlot = amuletSlot;
  }


  public CharacterSchema artifact1Slot(String artifact1Slot) {
    this.artifact1Slot = artifact1Slot;
    return this;
  }

   /**
   * Artifact 1 slot.
   * @return artifact1Slot
  **/
  @javax.annotation.Nonnull
  public String getArtifact1Slot() {
    return artifact1Slot;
  }

  public void setArtifact1Slot(String artifact1Slot) {
    this.artifact1Slot = artifact1Slot;
  }


  public CharacterSchema artifact2Slot(String artifact2Slot) {
    this.artifact2Slot = artifact2Slot;
    return this;
  }

   /**
   * Artifact 2 slot.
   * @return artifact2Slot
  **/
  @javax.annotation.Nonnull
  public String getArtifact2Slot() {
    return artifact2Slot;
  }

  public void setArtifact2Slot(String artifact2Slot) {
    this.artifact2Slot = artifact2Slot;
  }


  public CharacterSchema artifact3Slot(String artifact3Slot) {
    this.artifact3Slot = artifact3Slot;
    return this;
  }

   /**
   * Artifact 3 slot.
   * @return artifact3Slot
  **/
  @javax.annotation.Nonnull
  public String getArtifact3Slot() {
    return artifact3Slot;
  }

  public void setArtifact3Slot(String artifact3Slot) {
    this.artifact3Slot = artifact3Slot;
  }


  public CharacterSchema consumable1Slot(String consumable1Slot) {
    this.consumable1Slot = consumable1Slot;
    return this;
  }

   /**
   * Consumable 1 slot.
   * @return consumable1Slot
  **/
  @javax.annotation.Nonnull
  public String getConsumable1Slot() {
    return consumable1Slot;
  }

  public void setConsumable1Slot(String consumable1Slot) {
    this.consumable1Slot = consumable1Slot;
  }


  public CharacterSchema consumable1SlotQuantity(Integer consumable1SlotQuantity) {
    this.consumable1SlotQuantity = consumable1SlotQuantity;
    return this;
  }

   /**
   * Consumable 1 quantity.
   * @return consumable1SlotQuantity
  **/
  @javax.annotation.Nonnull
  public Integer getConsumable1SlotQuantity() {
    return consumable1SlotQuantity;
  }

  public void setConsumable1SlotQuantity(Integer consumable1SlotQuantity) {
    this.consumable1SlotQuantity = consumable1SlotQuantity;
  }


  public CharacterSchema consumable2Slot(String consumable2Slot) {
    this.consumable2Slot = consumable2Slot;
    return this;
  }

   /**
   * Consumable 2 slot.
   * @return consumable2Slot
  **/
  @javax.annotation.Nonnull
  public String getConsumable2Slot() {
    return consumable2Slot;
  }

  public void setConsumable2Slot(String consumable2Slot) {
    this.consumable2Slot = consumable2Slot;
  }


  public CharacterSchema consumable2SlotQuantity(Integer consumable2SlotQuantity) {
    this.consumable2SlotQuantity = consumable2SlotQuantity;
    return this;
  }

   /**
   * Consumable 2 quantity.
   * @return consumable2SlotQuantity
  **/
  @javax.annotation.Nonnull
  public Integer getConsumable2SlotQuantity() {
    return consumable2SlotQuantity;
  }

  public void setConsumable2SlotQuantity(Integer consumable2SlotQuantity) {
    this.consumable2SlotQuantity = consumable2SlotQuantity;
  }


  public CharacterSchema task(String task) {
    this.task = task;
    return this;
  }

   /**
   * Task in progress.
   * @return task
  **/
  @javax.annotation.Nonnull
  public String getTask() {
    return task;
  }

  public void setTask(String task) {
    this.task = task;
  }


  public CharacterSchema taskType(String taskType) {
    this.taskType = taskType;
    return this;
  }

   /**
   * Task type.
   * @return taskType
  **/
  @javax.annotation.Nonnull
  public String getTaskType() {
    return taskType;
  }

  public void setTaskType(String taskType) {
    this.taskType = taskType;
  }


  public CharacterSchema taskProgress(Integer taskProgress) {
    this.taskProgress = taskProgress;
    return this;
  }

   /**
   * Task progression.
   * @return taskProgress
  **/
  @javax.annotation.Nonnull
  public Integer getTaskProgress() {
    return taskProgress;
  }

  public void setTaskProgress(Integer taskProgress) {
    this.taskProgress = taskProgress;
  }


  public CharacterSchema taskTotal(Integer taskTotal) {
    this.taskTotal = taskTotal;
    return this;
  }

   /**
   * Task total objective.
   * @return taskTotal
  **/
  @javax.annotation.Nonnull
  public Integer getTaskTotal() {
    return taskTotal;
  }

  public void setTaskTotal(Integer taskTotal) {
    this.taskTotal = taskTotal;
  }


  public CharacterSchema inventoryMaxItems(Integer inventoryMaxItems) {
    this.inventoryMaxItems = inventoryMaxItems;
    return this;
  }

   /**
   * Inventory max items.
   * @return inventoryMaxItems
  **/
  @javax.annotation.Nonnull
  public Integer getInventoryMaxItems() {
    return inventoryMaxItems;
  }

  public void setInventoryMaxItems(Integer inventoryMaxItems) {
    this.inventoryMaxItems = inventoryMaxItems;
  }


  public CharacterSchema inventory(List<InventorySlot> inventory) {
    this.inventory = inventory;
    return this;
  }

  public CharacterSchema addInventoryItem(InventorySlot inventoryItem) {
    if (this.inventory == null) {
      this.inventory = new ArrayList<>();
    }
    this.inventory.add(inventoryItem);
    return this;
  }

   /**
   * List of inventory slots.
   * @return inventory
  **/
  @javax.annotation.Nullable
  public List<InventorySlot> getInventory() {
    return inventory;
  }

  public void setInventory(List<InventorySlot> inventory) {
    this.inventory = inventory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CharacterSchema characterSchema = (CharacterSchema) o;
    return Objects.equals(this.name, characterSchema.name) &&
        Objects.equals(this.skin, characterSchema.skin) &&
        Objects.equals(this.level, characterSchema.level) &&
        Objects.equals(this.xp, characterSchema.xp) &&
        Objects.equals(this.maxXp, characterSchema.maxXp) &&
        Objects.equals(this.totalXp, characterSchema.totalXp) &&
        Objects.equals(this.gold, characterSchema.gold) &&
        Objects.equals(this.speed, characterSchema.speed) &&
        Objects.equals(this.miningLevel, characterSchema.miningLevel) &&
        Objects.equals(this.miningXp, characterSchema.miningXp) &&
        Objects.equals(this.miningMaxXp, characterSchema.miningMaxXp) &&
        Objects.equals(this.woodcuttingLevel, characterSchema.woodcuttingLevel) &&
        Objects.equals(this.woodcuttingXp, characterSchema.woodcuttingXp) &&
        Objects.equals(this.woodcuttingMaxXp, characterSchema.woodcuttingMaxXp) &&
        Objects.equals(this.fishingLevel, characterSchema.fishingLevel) &&
        Objects.equals(this.fishingXp, characterSchema.fishingXp) &&
        Objects.equals(this.fishingMaxXp, characterSchema.fishingMaxXp) &&
        Objects.equals(this.weaponcraftingLevel, characterSchema.weaponcraftingLevel) &&
        Objects.equals(this.weaponcraftingXp, characterSchema.weaponcraftingXp) &&
        Objects.equals(this.weaponcraftingMaxXp, characterSchema.weaponcraftingMaxXp) &&
        Objects.equals(this.gearcraftingLevel, characterSchema.gearcraftingLevel) &&
        Objects.equals(this.gearcraftingXp, characterSchema.gearcraftingXp) &&
        Objects.equals(this.gearcraftingMaxXp, characterSchema.gearcraftingMaxXp) &&
        Objects.equals(this.jewelrycraftingLevel, characterSchema.jewelrycraftingLevel) &&
        Objects.equals(this.jewelrycraftingXp, characterSchema.jewelrycraftingXp) &&
        Objects.equals(this.jewelrycraftingMaxXp, characterSchema.jewelrycraftingMaxXp) &&
        Objects.equals(this.cookingLevel, characterSchema.cookingLevel) &&
        Objects.equals(this.cookingXp, characterSchema.cookingXp) &&
        Objects.equals(this.cookingMaxXp, characterSchema.cookingMaxXp) &&
        Objects.equals(this.hp, characterSchema.hp) &&
        Objects.equals(this.haste, characterSchema.haste) &&
        Objects.equals(this.criticalStrike, characterSchema.criticalStrike) &&
        Objects.equals(this.stamina, characterSchema.stamina) &&
        Objects.equals(this.attackFire, characterSchema.attackFire) &&
        Objects.equals(this.attackEarth, characterSchema.attackEarth) &&
        Objects.equals(this.attackWater, characterSchema.attackWater) &&
        Objects.equals(this.attackAir, characterSchema.attackAir) &&
        Objects.equals(this.dmgFire, characterSchema.dmgFire) &&
        Objects.equals(this.dmgEarth, characterSchema.dmgEarth) &&
        Objects.equals(this.dmgWater, characterSchema.dmgWater) &&
        Objects.equals(this.dmgAir, characterSchema.dmgAir) &&
        Objects.equals(this.resFire, characterSchema.resFire) &&
        Objects.equals(this.resEarth, characterSchema.resEarth) &&
        Objects.equals(this.resWater, characterSchema.resWater) &&
        Objects.equals(this.resAir, characterSchema.resAir) &&
        Objects.equals(this.x, characterSchema.x) &&
        Objects.equals(this.y, characterSchema.y) &&
        Objects.equals(this.cooldown, characterSchema.cooldown) &&
        Objects.equals(this.cooldownExpiration, characterSchema.cooldownExpiration) &&
        Objects.equals(this.weaponSlot, characterSchema.weaponSlot) &&
        Objects.equals(this.shieldSlot, characterSchema.shieldSlot) &&
        Objects.equals(this.helmetSlot, characterSchema.helmetSlot) &&
        Objects.equals(this.bodyArmorSlot, characterSchema.bodyArmorSlot) &&
        Objects.equals(this.legArmorSlot, characterSchema.legArmorSlot) &&
        Objects.equals(this.bootsSlot, characterSchema.bootsSlot) &&
        Objects.equals(this.ring1Slot, characterSchema.ring1Slot) &&
        Objects.equals(this.ring2Slot, characterSchema.ring2Slot) &&
        Objects.equals(this.amuletSlot, characterSchema.amuletSlot) &&
        Objects.equals(this.artifact1Slot, characterSchema.artifact1Slot) &&
        Objects.equals(this.artifact2Slot, characterSchema.artifact2Slot) &&
        Objects.equals(this.artifact3Slot, characterSchema.artifact3Slot) &&
        Objects.equals(this.consumable1Slot, characterSchema.consumable1Slot) &&
        Objects.equals(this.consumable1SlotQuantity, characterSchema.consumable1SlotQuantity) &&
        Objects.equals(this.consumable2Slot, characterSchema.consumable2Slot) &&
        Objects.equals(this.consumable2SlotQuantity, characterSchema.consumable2SlotQuantity) &&
        Objects.equals(this.task, characterSchema.task) &&
        Objects.equals(this.taskType, characterSchema.taskType) &&
        Objects.equals(this.taskProgress, characterSchema.taskProgress) &&
        Objects.equals(this.taskTotal, characterSchema.taskTotal) &&
        Objects.equals(this.inventoryMaxItems, characterSchema.inventoryMaxItems) &&
        Objects.equals(this.inventory, characterSchema.inventory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, skin, level, xp, maxXp, totalXp, gold, speed, miningLevel, miningXp, miningMaxXp, woodcuttingLevel, woodcuttingXp, woodcuttingMaxXp, fishingLevel, fishingXp, fishingMaxXp, weaponcraftingLevel, weaponcraftingXp, weaponcraftingMaxXp, gearcraftingLevel, gearcraftingXp, gearcraftingMaxXp, jewelrycraftingLevel, jewelrycraftingXp, jewelrycraftingMaxXp, cookingLevel, cookingXp, cookingMaxXp, hp, haste, criticalStrike, stamina, attackFire, attackEarth, attackWater, attackAir, dmgFire, dmgEarth, dmgWater, dmgAir, resFire, resEarth, resWater, resAir, x, y, cooldown, cooldownExpiration, weaponSlot, shieldSlot, helmetSlot, bodyArmorSlot, legArmorSlot, bootsSlot, ring1Slot, ring2Slot, amuletSlot, artifact1Slot, artifact2Slot, artifact3Slot, consumable1Slot, consumable1SlotQuantity, consumable2Slot, consumable2SlotQuantity, task, taskType, taskProgress, taskTotal, inventoryMaxItems, inventory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CharacterSchema {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    skin: ").append(toIndentedString(skin)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    xp: ").append(toIndentedString(xp)).append("\n");
    sb.append("    maxXp: ").append(toIndentedString(maxXp)).append("\n");
    sb.append("    totalXp: ").append(toIndentedString(totalXp)).append("\n");
    sb.append("    gold: ").append(toIndentedString(gold)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    miningLevel: ").append(toIndentedString(miningLevel)).append("\n");
    sb.append("    miningXp: ").append(toIndentedString(miningXp)).append("\n");
    sb.append("    miningMaxXp: ").append(toIndentedString(miningMaxXp)).append("\n");
    sb.append("    woodcuttingLevel: ").append(toIndentedString(woodcuttingLevel)).append("\n");
    sb.append("    woodcuttingXp: ").append(toIndentedString(woodcuttingXp)).append("\n");
    sb.append("    woodcuttingMaxXp: ").append(toIndentedString(woodcuttingMaxXp)).append("\n");
    sb.append("    fishingLevel: ").append(toIndentedString(fishingLevel)).append("\n");
    sb.append("    fishingXp: ").append(toIndentedString(fishingXp)).append("\n");
    sb.append("    fishingMaxXp: ").append(toIndentedString(fishingMaxXp)).append("\n");
    sb.append("    weaponcraftingLevel: ").append(toIndentedString(weaponcraftingLevel)).append("\n");
    sb.append("    weaponcraftingXp: ").append(toIndentedString(weaponcraftingXp)).append("\n");
    sb.append("    weaponcraftingMaxXp: ").append(toIndentedString(weaponcraftingMaxXp)).append("\n");
    sb.append("    gearcraftingLevel: ").append(toIndentedString(gearcraftingLevel)).append("\n");
    sb.append("    gearcraftingXp: ").append(toIndentedString(gearcraftingXp)).append("\n");
    sb.append("    gearcraftingMaxXp: ").append(toIndentedString(gearcraftingMaxXp)).append("\n");
    sb.append("    jewelrycraftingLevel: ").append(toIndentedString(jewelrycraftingLevel)).append("\n");
    sb.append("    jewelrycraftingXp: ").append(toIndentedString(jewelrycraftingXp)).append("\n");
    sb.append("    jewelrycraftingMaxXp: ").append(toIndentedString(jewelrycraftingMaxXp)).append("\n");
    sb.append("    cookingLevel: ").append(toIndentedString(cookingLevel)).append("\n");
    sb.append("    cookingXp: ").append(toIndentedString(cookingXp)).append("\n");
    sb.append("    cookingMaxXp: ").append(toIndentedString(cookingMaxXp)).append("\n");
    sb.append("    hp: ").append(toIndentedString(hp)).append("\n");
    sb.append("    haste: ").append(toIndentedString(haste)).append("\n");
    sb.append("    criticalStrike: ").append(toIndentedString(criticalStrike)).append("\n");
    sb.append("    stamina: ").append(toIndentedString(stamina)).append("\n");
    sb.append("    attackFire: ").append(toIndentedString(attackFire)).append("\n");
    sb.append("    attackEarth: ").append(toIndentedString(attackEarth)).append("\n");
    sb.append("    attackWater: ").append(toIndentedString(attackWater)).append("\n");
    sb.append("    attackAir: ").append(toIndentedString(attackAir)).append("\n");
    sb.append("    dmgFire: ").append(toIndentedString(dmgFire)).append("\n");
    sb.append("    dmgEarth: ").append(toIndentedString(dmgEarth)).append("\n");
    sb.append("    dmgWater: ").append(toIndentedString(dmgWater)).append("\n");
    sb.append("    dmgAir: ").append(toIndentedString(dmgAir)).append("\n");
    sb.append("    resFire: ").append(toIndentedString(resFire)).append("\n");
    sb.append("    resEarth: ").append(toIndentedString(resEarth)).append("\n");
    sb.append("    resWater: ").append(toIndentedString(resWater)).append("\n");
    sb.append("    resAir: ").append(toIndentedString(resAir)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("    cooldown: ").append(toIndentedString(cooldown)).append("\n");
    sb.append("    cooldownExpiration: ").append(toIndentedString(cooldownExpiration)).append("\n");
    sb.append("    weaponSlot: ").append(toIndentedString(weaponSlot)).append("\n");
    sb.append("    shieldSlot: ").append(toIndentedString(shieldSlot)).append("\n");
    sb.append("    helmetSlot: ").append(toIndentedString(helmetSlot)).append("\n");
    sb.append("    bodyArmorSlot: ").append(toIndentedString(bodyArmorSlot)).append("\n");
    sb.append("    legArmorSlot: ").append(toIndentedString(legArmorSlot)).append("\n");
    sb.append("    bootsSlot: ").append(toIndentedString(bootsSlot)).append("\n");
    sb.append("    ring1Slot: ").append(toIndentedString(ring1Slot)).append("\n");
    sb.append("    ring2Slot: ").append(toIndentedString(ring2Slot)).append("\n");
    sb.append("    amuletSlot: ").append(toIndentedString(amuletSlot)).append("\n");
    sb.append("    artifact1Slot: ").append(toIndentedString(artifact1Slot)).append("\n");
    sb.append("    artifact2Slot: ").append(toIndentedString(artifact2Slot)).append("\n");
    sb.append("    artifact3Slot: ").append(toIndentedString(artifact3Slot)).append("\n");
    sb.append("    consumable1Slot: ").append(toIndentedString(consumable1Slot)).append("\n");
    sb.append("    consumable1SlotQuantity: ").append(toIndentedString(consumable1SlotQuantity)).append("\n");
    sb.append("    consumable2Slot: ").append(toIndentedString(consumable2Slot)).append("\n");
    sb.append("    consumable2SlotQuantity: ").append(toIndentedString(consumable2SlotQuantity)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("    taskProgress: ").append(toIndentedString(taskProgress)).append("\n");
    sb.append("    taskTotal: ").append(toIndentedString(taskTotal)).append("\n");
    sb.append("    inventoryMaxItems: ").append(toIndentedString(inventoryMaxItems)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("skin");
    openapiFields.add("level");
    openapiFields.add("xp");
    openapiFields.add("max_xp");
    openapiFields.add("total_xp");
    openapiFields.add("gold");
    openapiFields.add("speed");
    openapiFields.add("mining_level");
    openapiFields.add("mining_xp");
    openapiFields.add("mining_max_xp");
    openapiFields.add("woodcutting_level");
    openapiFields.add("woodcutting_xp");
    openapiFields.add("woodcutting_max_xp");
    openapiFields.add("fishing_level");
    openapiFields.add("fishing_xp");
    openapiFields.add("fishing_max_xp");
    openapiFields.add("weaponcrafting_level");
    openapiFields.add("weaponcrafting_xp");
    openapiFields.add("weaponcrafting_max_xp");
    openapiFields.add("gearcrafting_level");
    openapiFields.add("gearcrafting_xp");
    openapiFields.add("gearcrafting_max_xp");
    openapiFields.add("jewelrycrafting_level");
    openapiFields.add("jewelrycrafting_xp");
    openapiFields.add("jewelrycrafting_max_xp");
    openapiFields.add("cooking_level");
    openapiFields.add("cooking_xp");
    openapiFields.add("cooking_max_xp");
    openapiFields.add("hp");
    openapiFields.add("haste");
    openapiFields.add("critical_strike");
    openapiFields.add("stamina");
    openapiFields.add("attack_fire");
    openapiFields.add("attack_earth");
    openapiFields.add("attack_water");
    openapiFields.add("attack_air");
    openapiFields.add("dmg_fire");
    openapiFields.add("dmg_earth");
    openapiFields.add("dmg_water");
    openapiFields.add("dmg_air");
    openapiFields.add("res_fire");
    openapiFields.add("res_earth");
    openapiFields.add("res_water");
    openapiFields.add("res_air");
    openapiFields.add("x");
    openapiFields.add("y");
    openapiFields.add("cooldown");
    openapiFields.add("cooldown_expiration");
    openapiFields.add("weapon_slot");
    openapiFields.add("shield_slot");
    openapiFields.add("helmet_slot");
    openapiFields.add("body_armor_slot");
    openapiFields.add("leg_armor_slot");
    openapiFields.add("boots_slot");
    openapiFields.add("ring1_slot");
    openapiFields.add("ring2_slot");
    openapiFields.add("amulet_slot");
    openapiFields.add("artifact1_slot");
    openapiFields.add("artifact2_slot");
    openapiFields.add("artifact3_slot");
    openapiFields.add("consumable1_slot");
    openapiFields.add("consumable1_slot_quantity");
    openapiFields.add("consumable2_slot");
    openapiFields.add("consumable2_slot_quantity");
    openapiFields.add("task");
    openapiFields.add("task_type");
    openapiFields.add("task_progress");
    openapiFields.add("task_total");
    openapiFields.add("inventory_max_items");
    openapiFields.add("inventory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("skin");
    openapiRequiredFields.add("level");
    openapiRequiredFields.add("xp");
    openapiRequiredFields.add("max_xp");
    openapiRequiredFields.add("total_xp");
    openapiRequiredFields.add("gold");
    openapiRequiredFields.add("speed");
    openapiRequiredFields.add("mining_level");
    openapiRequiredFields.add("mining_xp");
    openapiRequiredFields.add("mining_max_xp");
    openapiRequiredFields.add("woodcutting_level");
    openapiRequiredFields.add("woodcutting_xp");
    openapiRequiredFields.add("woodcutting_max_xp");
    openapiRequiredFields.add("fishing_level");
    openapiRequiredFields.add("fishing_xp");
    openapiRequiredFields.add("fishing_max_xp");
    openapiRequiredFields.add("weaponcrafting_level");
    openapiRequiredFields.add("weaponcrafting_xp");
    openapiRequiredFields.add("weaponcrafting_max_xp");
    openapiRequiredFields.add("gearcrafting_level");
    openapiRequiredFields.add("gearcrafting_xp");
    openapiRequiredFields.add("gearcrafting_max_xp");
    openapiRequiredFields.add("jewelrycrafting_level");
    openapiRequiredFields.add("jewelrycrafting_xp");
    openapiRequiredFields.add("jewelrycrafting_max_xp");
    openapiRequiredFields.add("cooking_level");
    openapiRequiredFields.add("cooking_xp");
    openapiRequiredFields.add("cooking_max_xp");
    openapiRequiredFields.add("hp");
    openapiRequiredFields.add("haste");
    openapiRequiredFields.add("critical_strike");
    openapiRequiredFields.add("stamina");
    openapiRequiredFields.add("attack_fire");
    openapiRequiredFields.add("attack_earth");
    openapiRequiredFields.add("attack_water");
    openapiRequiredFields.add("attack_air");
    openapiRequiredFields.add("dmg_fire");
    openapiRequiredFields.add("dmg_earth");
    openapiRequiredFields.add("dmg_water");
    openapiRequiredFields.add("dmg_air");
    openapiRequiredFields.add("res_fire");
    openapiRequiredFields.add("res_earth");
    openapiRequiredFields.add("res_water");
    openapiRequiredFields.add("res_air");
    openapiRequiredFields.add("x");
    openapiRequiredFields.add("y");
    openapiRequiredFields.add("cooldown");
    openapiRequiredFields.add("weapon_slot");
    openapiRequiredFields.add("shield_slot");
    openapiRequiredFields.add("helmet_slot");
    openapiRequiredFields.add("body_armor_slot");
    openapiRequiredFields.add("leg_armor_slot");
    openapiRequiredFields.add("boots_slot");
    openapiRequiredFields.add("ring1_slot");
    openapiRequiredFields.add("ring2_slot");
    openapiRequiredFields.add("amulet_slot");
    openapiRequiredFields.add("artifact1_slot");
    openapiRequiredFields.add("artifact2_slot");
    openapiRequiredFields.add("artifact3_slot");
    openapiRequiredFields.add("consumable1_slot");
    openapiRequiredFields.add("consumable1_slot_quantity");
    openapiRequiredFields.add("consumable2_slot");
    openapiRequiredFields.add("consumable2_slot_quantity");
    openapiRequiredFields.add("task");
    openapiRequiredFields.add("task_type");
    openapiRequiredFields.add("task_progress");
    openapiRequiredFields.add("task_total");
    openapiRequiredFields.add("inventory_max_items");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CharacterSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CharacterSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CharacterSchema is not found in the empty JSON string", CharacterSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CharacterSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CharacterSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CharacterSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("skin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skin").toString()));
      }
      // validate the required field `skin`
      SkinEnum.validateJsonElement(jsonObj.get("skin"));
      if (!jsonObj.get("weapon_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weapon_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weapon_slot").toString()));
      }
      if (!jsonObj.get("shield_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shield_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shield_slot").toString()));
      }
      if (!jsonObj.get("helmet_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helmet_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helmet_slot").toString()));
      }
      if (!jsonObj.get("body_armor_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_armor_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_armor_slot").toString()));
      }
      if (!jsonObj.get("leg_armor_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leg_armor_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leg_armor_slot").toString()));
      }
      if (!jsonObj.get("boots_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boots_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boots_slot").toString()));
      }
      if (!jsonObj.get("ring1_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ring1_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ring1_slot").toString()));
      }
      if (!jsonObj.get("ring2_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ring2_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ring2_slot").toString()));
      }
      if (!jsonObj.get("amulet_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amulet_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amulet_slot").toString()));
      }
      if (!jsonObj.get("artifact1_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifact1_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifact1_slot").toString()));
      }
      if (!jsonObj.get("artifact2_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifact2_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifact2_slot").toString()));
      }
      if (!jsonObj.get("artifact3_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifact3_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifact3_slot").toString()));
      }
      if (!jsonObj.get("consumable1_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumable1_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumable1_slot").toString()));
      }
      if (!jsonObj.get("consumable2_slot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumable2_slot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumable2_slot").toString()));
      }
      if (!jsonObj.get("task").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task").toString()));
      }
      if (!jsonObj.get("task_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_type").toString()));
      }
      if (jsonObj.get("inventory") != null && !jsonObj.get("inventory").isJsonNull()) {
        JsonArray jsonArrayinventory = jsonObj.getAsJsonArray("inventory");
        if (jsonArrayinventory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inventory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inventory` to be an array in the JSON string but got `%s`", jsonObj.get("inventory").toString()));
          }

          // validate the optional field `inventory` (array)
          for (int i = 0; i < jsonArrayinventory.size(); i++) {
            InventorySlot.validateJsonElement(jsonArrayinventory.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CharacterSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CharacterSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CharacterSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CharacterSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<CharacterSchema>() {
           @Override
           public void write(JsonWriter out, CharacterSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CharacterSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CharacterSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CharacterSchema
  * @throws IOException if the JSON string is invalid with respect to CharacterSchema
  */
  public static CharacterSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CharacterSchema.class);
  }

 /**
  * Convert an instance of CharacterSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

