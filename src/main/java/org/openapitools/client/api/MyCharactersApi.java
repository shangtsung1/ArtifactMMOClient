/*
 * Artifacts API
 *  Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 
 *
 * The version of the OpenAPI document: 1.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActionItemBankResponseSchema;
import org.openapitools.client.model.CharacterFightResponseSchema;
import org.openapitools.client.model.CharacterMovementResponseSchema;
import org.openapitools.client.model.CraftingSchema;
import org.openapitools.client.model.DataPageLogSchema;
import org.openapitools.client.model.DeleteItemResponseSchema;
import org.openapitools.client.model.DepositWithdrawGoldSchema;
import org.openapitools.client.model.DestinationSchema;
import org.openapitools.client.model.EquipSchema;
import org.openapitools.client.model.EquipmentResponseSchema;
import org.openapitools.client.model.GETransactionItemSchema;
import org.openapitools.client.model.GETransactionResponseSchema;
import org.openapitools.client.model.GoldResponseSchema;
import org.openapitools.client.model.MyCharactersListSchema;
import org.openapitools.client.model.RecyclingResponseSchema;
import org.openapitools.client.model.RecyclingSchema;
import org.openapitools.client.model.SimpleItemSchema;
import org.openapitools.client.model.SkillResponseSchema;
import org.openapitools.client.model.TaskResponseSchema;
import org.openapitools.client.model.TaskRewardResponseSchema;
import org.openapitools.client.model.UnequipSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MyCharactersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MyCharactersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MyCharactersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for actionAcceptNewTaskMyNameActionTaskNewPost
     * @param name Name of your character. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New task successfully accepted. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Tasks Master not found on this map. </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> Character already has a task. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionAcceptNewTaskMyNameActionTaskNewPostCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/{name}/action/task/new"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionAcceptNewTaskMyNameActionTaskNewPostValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionAcceptNewTaskMyNameActionTaskNewPost(Async)");
        }

        return actionAcceptNewTaskMyNameActionTaskNewPostCall(name, _callback);

    }

    /**
     * Action Accept New Task
     * Accepting a new task.
     * @param name Name of your character. (required)
     * @return TaskResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New task successfully accepted. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Tasks Master not found on this map. </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> Character already has a task. </td><td>  -  </td></tr>
     </table>
     */
    public TaskResponseSchema actionAcceptNewTaskMyNameActionTaskNewPost(String name) throws ApiException {
        ApiResponse<TaskResponseSchema> localVarResp = actionAcceptNewTaskMyNameActionTaskNewPostWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Action Accept New Task
     * Accepting a new task.
     * @param name Name of your character. (required)
     * @return ApiResponse&lt;TaskResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New task successfully accepted. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Tasks Master not found on this map. </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> Character already has a task. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskResponseSchema> actionAcceptNewTaskMyNameActionTaskNewPostWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = actionAcceptNewTaskMyNameActionTaskNewPostValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<TaskResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Accept New Task (asynchronously)
     * Accepting a new task.
     * @param name Name of your character. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New task successfully accepted. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Tasks Master not found on this map. </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> Character already has a task. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionAcceptNewTaskMyNameActionTaskNewPostAsync(String name, final ApiCallback<TaskResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionAcceptNewTaskMyNameActionTaskNewPostValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<TaskResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionCompleteTaskMyNameActionTaskCompletePost
     * @param name Name of your character. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The task has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Tasks Master not found on this map. </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> Character has not completed the task. </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> Character has no task. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionCompleteTaskMyNameActionTaskCompletePostCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/{name}/action/task/complete"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionCompleteTaskMyNameActionTaskCompletePostValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionCompleteTaskMyNameActionTaskCompletePost(Async)");
        }

        return actionCompleteTaskMyNameActionTaskCompletePostCall(name, _callback);

    }

    /**
     * Action Complete Task
     * Complete a task.
     * @param name Name of your character. (required)
     * @return TaskRewardResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The task has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Tasks Master not found on this map. </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> Character has not completed the task. </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> Character has no task. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public TaskRewardResponseSchema actionCompleteTaskMyNameActionTaskCompletePost(String name) throws ApiException {
        ApiResponse<TaskRewardResponseSchema> localVarResp = actionCompleteTaskMyNameActionTaskCompletePostWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Action Complete Task
     * Complete a task.
     * @param name Name of your character. (required)
     * @return ApiResponse&lt;TaskRewardResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The task has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Tasks Master not found on this map. </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> Character has not completed the task. </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> Character has no task. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskRewardResponseSchema> actionCompleteTaskMyNameActionTaskCompletePostWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = actionCompleteTaskMyNameActionTaskCompletePostValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<TaskRewardResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Complete Task (asynchronously)
     * Complete a task.
     * @param name Name of your character. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The task has been successfully completed. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Tasks Master not found on this map. </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> Character has not completed the task. </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> Character has no task. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionCompleteTaskMyNameActionTaskCompletePostAsync(String name, final ApiCallback<TaskRewardResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionCompleteTaskMyNameActionTaskCompletePostValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<TaskRewardResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionCraftingMyNameActionCraftingPost
     * @param name Name of your character. (required)
     * @param craftingSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successfully crafted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Craft not found. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Workshop not found on this map. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> Not skill level required. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionCraftingMyNameActionCraftingPostCall(String name, CraftingSchema craftingSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = craftingSchema;

        // create path and map variables
        String localVarPath = "/my/{name}/action/crafting"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionCraftingMyNameActionCraftingPostValidateBeforeCall(String name, CraftingSchema craftingSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionCraftingMyNameActionCraftingPost(Async)");
        }

        // verify the required parameter 'craftingSchema' is set
        if (craftingSchema == null) {
            throw new ApiException("Missing the required parameter 'craftingSchema' when calling actionCraftingMyNameActionCraftingPost(Async)");
        }

        return actionCraftingMyNameActionCraftingPostCall(name, craftingSchema, _callback);

    }

    /**
     * Action Crafting
     * Crafting an item. The character must be on a map with a workshop.
     * @param name Name of your character. (required)
     * @param craftingSchema  (required)
     * @return SkillResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successfully crafted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Craft not found. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Workshop not found on this map. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> Not skill level required. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public SkillResponseSchema actionCraftingMyNameActionCraftingPost(String name, CraftingSchema craftingSchema) throws ApiException {
        ApiResponse<SkillResponseSchema> localVarResp = actionCraftingMyNameActionCraftingPostWithHttpInfo(name, craftingSchema);
        return localVarResp.getData();
    }

    /**
     * Action Crafting
     * Crafting an item. The character must be on a map with a workshop.
     * @param name Name of your character. (required)
     * @param craftingSchema  (required)
     * @return ApiResponse&lt;SkillResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successfully crafted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Craft not found. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Workshop not found on this map. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> Not skill level required. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkillResponseSchema> actionCraftingMyNameActionCraftingPostWithHttpInfo(String name, CraftingSchema craftingSchema) throws ApiException {
        okhttp3.Call localVarCall = actionCraftingMyNameActionCraftingPostValidateBeforeCall(name, craftingSchema, null);
        Type localVarReturnType = new TypeToken<SkillResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Crafting (asynchronously)
     * Crafting an item. The character must be on a map with a workshop.
     * @param name Name of your character. (required)
     * @param craftingSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successfully crafted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Craft not found. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Workshop not found on this map. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> Not skill level required. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionCraftingMyNameActionCraftingPostAsync(String name, CraftingSchema craftingSchema, final ApiCallback<SkillResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionCraftingMyNameActionCraftingPostValidateBeforeCall(name, craftingSchema, _callback);
        Type localVarReturnType = new TypeToken<SkillResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionDeleteItemMyNameActionDeletePost
     * @param name Name of your character. (required)
     * @param simpleItemSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully deleted from your character. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionDeleteItemMyNameActionDeletePostCall(String name, SimpleItemSchema simpleItemSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simpleItemSchema;

        // create path and map variables
        String localVarPath = "/my/{name}/action/delete"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionDeleteItemMyNameActionDeletePostValidateBeforeCall(String name, SimpleItemSchema simpleItemSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionDeleteItemMyNameActionDeletePost(Async)");
        }

        // verify the required parameter 'simpleItemSchema' is set
        if (simpleItemSchema == null) {
            throw new ApiException("Missing the required parameter 'simpleItemSchema' when calling actionDeleteItemMyNameActionDeletePost(Async)");
        }

        return actionDeleteItemMyNameActionDeletePostCall(name, simpleItemSchema, _callback);

    }

    /**
     * Action Delete Item
     * Delete an item from your character&#39;s inventory.
     * @param name Name of your character. (required)
     * @param simpleItemSchema  (required)
     * @return DeleteItemResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully deleted from your character. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteItemResponseSchema actionDeleteItemMyNameActionDeletePost(String name, SimpleItemSchema simpleItemSchema) throws ApiException {
        ApiResponse<DeleteItemResponseSchema> localVarResp = actionDeleteItemMyNameActionDeletePostWithHttpInfo(name, simpleItemSchema);
        return localVarResp.getData();
    }

    /**
     * Action Delete Item
     * Delete an item from your character&#39;s inventory.
     * @param name Name of your character. (required)
     * @param simpleItemSchema  (required)
     * @return ApiResponse&lt;DeleteItemResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully deleted from your character. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteItemResponseSchema> actionDeleteItemMyNameActionDeletePostWithHttpInfo(String name, SimpleItemSchema simpleItemSchema) throws ApiException {
        okhttp3.Call localVarCall = actionDeleteItemMyNameActionDeletePostValidateBeforeCall(name, simpleItemSchema, null);
        Type localVarReturnType = new TypeToken<DeleteItemResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Delete Item (asynchronously)
     * Delete an item from your character&#39;s inventory.
     * @param name Name of your character. (required)
     * @param simpleItemSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully deleted from your character. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionDeleteItemMyNameActionDeletePostAsync(String name, SimpleItemSchema simpleItemSchema, final ApiCallback<DeleteItemResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionDeleteItemMyNameActionDeletePostValidateBeforeCall(name, simpleItemSchema, _callback);
        Type localVarReturnType = new TypeToken<DeleteItemResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionDepositBankGoldMyNameActionBankDepositGoldPost
     * @param name Name of your character. (required)
     * @param depositWithdrawGoldSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Golds successfully deposited in your bank. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> Insufficient golds on your character. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionDepositBankGoldMyNameActionBankDepositGoldPostCall(String name, DepositWithdrawGoldSchema depositWithdrawGoldSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = depositWithdrawGoldSchema;

        // create path and map variables
        String localVarPath = "/my/{name}/action/bank/deposit/gold"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionDepositBankGoldMyNameActionBankDepositGoldPostValidateBeforeCall(String name, DepositWithdrawGoldSchema depositWithdrawGoldSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionDepositBankGoldMyNameActionBankDepositGoldPost(Async)");
        }

        // verify the required parameter 'depositWithdrawGoldSchema' is set
        if (depositWithdrawGoldSchema == null) {
            throw new ApiException("Missing the required parameter 'depositWithdrawGoldSchema' when calling actionDepositBankGoldMyNameActionBankDepositGoldPost(Async)");
        }

        return actionDepositBankGoldMyNameActionBankDepositGoldPostCall(name, depositWithdrawGoldSchema, _callback);

    }

    /**
     * Action Deposit Bank Gold
     * Deposit golds in a bank on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param depositWithdrawGoldSchema  (required)
     * @return GoldResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Golds successfully deposited in your bank. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> Insufficient golds on your character. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
     </table>
     */
    public GoldResponseSchema actionDepositBankGoldMyNameActionBankDepositGoldPost(String name, DepositWithdrawGoldSchema depositWithdrawGoldSchema) throws ApiException {
        ApiResponse<GoldResponseSchema> localVarResp = actionDepositBankGoldMyNameActionBankDepositGoldPostWithHttpInfo(name, depositWithdrawGoldSchema);
        return localVarResp.getData();
    }

    /**
     * Action Deposit Bank Gold
     * Deposit golds in a bank on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param depositWithdrawGoldSchema  (required)
     * @return ApiResponse&lt;GoldResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Golds successfully deposited in your bank. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> Insufficient golds on your character. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoldResponseSchema> actionDepositBankGoldMyNameActionBankDepositGoldPostWithHttpInfo(String name, DepositWithdrawGoldSchema depositWithdrawGoldSchema) throws ApiException {
        okhttp3.Call localVarCall = actionDepositBankGoldMyNameActionBankDepositGoldPostValidateBeforeCall(name, depositWithdrawGoldSchema, null);
        Type localVarReturnType = new TypeToken<GoldResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Deposit Bank Gold (asynchronously)
     * Deposit golds in a bank on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param depositWithdrawGoldSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Golds successfully deposited in your bank. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> Insufficient golds on your character. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionDepositBankGoldMyNameActionBankDepositGoldPostAsync(String name, DepositWithdrawGoldSchema depositWithdrawGoldSchema, final ApiCallback<GoldResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionDepositBankGoldMyNameActionBankDepositGoldPostValidateBeforeCall(name, depositWithdrawGoldSchema, _callback);
        Type localVarReturnType = new TypeToken<GoldResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionDepositBankMyNameActionBankDepositPost
     * @param name Name of your character. (required)
     * @param simpleItemSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully deposited in your bank. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionDepositBankMyNameActionBankDepositPostCall(String name, SimpleItemSchema simpleItemSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simpleItemSchema;

        // create path and map variables
        String localVarPath = "/my/{name}/action/bank/deposit"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionDepositBankMyNameActionBankDepositPostValidateBeforeCall(String name, SimpleItemSchema simpleItemSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionDepositBankMyNameActionBankDepositPost(Async)");
        }

        // verify the required parameter 'simpleItemSchema' is set
        if (simpleItemSchema == null) {
            throw new ApiException("Missing the required parameter 'simpleItemSchema' when calling actionDepositBankMyNameActionBankDepositPost(Async)");
        }

        return actionDepositBankMyNameActionBankDepositPostCall(name, simpleItemSchema, _callback);

    }

    /**
     * Action Deposit Bank
     * Deposit an item in a bank on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param simpleItemSchema  (required)
     * @return ActionItemBankResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully deposited in your bank. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public ActionItemBankResponseSchema actionDepositBankMyNameActionBankDepositPost(String name, SimpleItemSchema simpleItemSchema) throws ApiException {
        ApiResponse<ActionItemBankResponseSchema> localVarResp = actionDepositBankMyNameActionBankDepositPostWithHttpInfo(name, simpleItemSchema);
        return localVarResp.getData();
    }

    /**
     * Action Deposit Bank
     * Deposit an item in a bank on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param simpleItemSchema  (required)
     * @return ApiResponse&lt;ActionItemBankResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully deposited in your bank. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionItemBankResponseSchema> actionDepositBankMyNameActionBankDepositPostWithHttpInfo(String name, SimpleItemSchema simpleItemSchema) throws ApiException {
        okhttp3.Call localVarCall = actionDepositBankMyNameActionBankDepositPostValidateBeforeCall(name, simpleItemSchema, null);
        Type localVarReturnType = new TypeToken<ActionItemBankResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Deposit Bank (asynchronously)
     * Deposit an item in a bank on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param simpleItemSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully deposited in your bank. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionDepositBankMyNameActionBankDepositPostAsync(String name, SimpleItemSchema simpleItemSchema, final ApiCallback<ActionItemBankResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionDepositBankMyNameActionBankDepositPostValidateBeforeCall(name, simpleItemSchema, _callback);
        Type localVarReturnType = new TypeToken<ActionItemBankResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionEquipItemMyNameActionEquipPost
     * @param name Name of your character. (required)
     * @param equipSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item has been successfully equipped on your character. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> Character level is insufficient. </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> Slot is not empty. </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> This item is already equipped. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionEquipItemMyNameActionEquipPostCall(String name, EquipSchema equipSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = equipSchema;

        // create path and map variables
        String localVarPath = "/my/{name}/action/equip"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionEquipItemMyNameActionEquipPostValidateBeforeCall(String name, EquipSchema equipSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionEquipItemMyNameActionEquipPost(Async)");
        }

        // verify the required parameter 'equipSchema' is set
        if (equipSchema == null) {
            throw new ApiException("Missing the required parameter 'equipSchema' when calling actionEquipItemMyNameActionEquipPost(Async)");
        }

        return actionEquipItemMyNameActionEquipPostCall(name, equipSchema, _callback);

    }

    /**
     * Action Equip Item
     * Equip an item on your character.
     * @param name Name of your character. (required)
     * @param equipSchema  (required)
     * @return EquipmentResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item has been successfully equipped on your character. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> Character level is insufficient. </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> Slot is not empty. </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> This item is already equipped. </td><td>  -  </td></tr>
     </table>
     */
    public EquipmentResponseSchema actionEquipItemMyNameActionEquipPost(String name, EquipSchema equipSchema) throws ApiException {
        ApiResponse<EquipmentResponseSchema> localVarResp = actionEquipItemMyNameActionEquipPostWithHttpInfo(name, equipSchema);
        return localVarResp.getData();
    }

    /**
     * Action Equip Item
     * Equip an item on your character.
     * @param name Name of your character. (required)
     * @param equipSchema  (required)
     * @return ApiResponse&lt;EquipmentResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item has been successfully equipped on your character. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> Character level is insufficient. </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> Slot is not empty. </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> This item is already equipped. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EquipmentResponseSchema> actionEquipItemMyNameActionEquipPostWithHttpInfo(String name, EquipSchema equipSchema) throws ApiException {
        okhttp3.Call localVarCall = actionEquipItemMyNameActionEquipPostValidateBeforeCall(name, equipSchema, null);
        Type localVarReturnType = new TypeToken<EquipmentResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Equip Item (asynchronously)
     * Equip an item on your character.
     * @param name Name of your character. (required)
     * @param equipSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item has been successfully equipped on your character. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> Character level is insufficient. </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> Slot is not empty. </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> This item is already equipped. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionEquipItemMyNameActionEquipPostAsync(String name, EquipSchema equipSchema, final ApiCallback<EquipmentResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionEquipItemMyNameActionEquipPostValidateBeforeCall(name, equipSchema, _callback);
        Type localVarReturnType = new TypeToken<EquipmentResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionFightMyNameActionFightPost
     * @param name Name of your character. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The fight ended successfully. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Monster not found on this map. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionFightMyNameActionFightPostCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/{name}/action/fight"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionFightMyNameActionFightPostValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionFightMyNameActionFightPost(Async)");
        }

        return actionFightMyNameActionFightPostCall(name, _callback);

    }

    /**
     * Action Fight
     * Start a fight against a monster on the character&#39;s map.
     * @param name Name of your character. (required)
     * @return CharacterFightResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The fight ended successfully. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Monster not found on this map. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public CharacterFightResponseSchema actionFightMyNameActionFightPost(String name) throws ApiException {
        ApiResponse<CharacterFightResponseSchema> localVarResp = actionFightMyNameActionFightPostWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Action Fight
     * Start a fight against a monster on the character&#39;s map.
     * @param name Name of your character. (required)
     * @return ApiResponse&lt;CharacterFightResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The fight ended successfully. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Monster not found on this map. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CharacterFightResponseSchema> actionFightMyNameActionFightPostWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = actionFightMyNameActionFightPostValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<CharacterFightResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Fight (asynchronously)
     * Start a fight against a monster on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The fight ended successfully. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Monster not found on this map. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionFightMyNameActionFightPostAsync(String name, final ApiCallback<CharacterFightResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionFightMyNameActionFightPostValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<CharacterFightResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionGatheringMyNameActionGatheringPost
     * @param name Name of your character. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource has been successfully gathered. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Resource not found on this map. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> Not skill level required. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGatheringMyNameActionGatheringPostCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/{name}/action/gathering"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionGatheringMyNameActionGatheringPostValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionGatheringMyNameActionGatheringPost(Async)");
        }

        return actionGatheringMyNameActionGatheringPostCall(name, _callback);

    }

    /**
     * Action Gathering
     * Harvest a resource on the character&#39;s map.
     * @param name Name of your character. (required)
     * @return SkillResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource has been successfully gathered. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Resource not found on this map. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> Not skill level required. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public SkillResponseSchema actionGatheringMyNameActionGatheringPost(String name) throws ApiException {
        ApiResponse<SkillResponseSchema> localVarResp = actionGatheringMyNameActionGatheringPostWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Action Gathering
     * Harvest a resource on the character&#39;s map.
     * @param name Name of your character. (required)
     * @return ApiResponse&lt;SkillResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource has been successfully gathered. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Resource not found on this map. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> Not skill level required. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkillResponseSchema> actionGatheringMyNameActionGatheringPostWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = actionGatheringMyNameActionGatheringPostValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<SkillResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Gathering (asynchronously)
     * Harvest a resource on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The resource has been successfully gathered. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Resource not found on this map. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> Not skill level required. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGatheringMyNameActionGatheringPostAsync(String name, final ApiCallback<SkillResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionGatheringMyNameActionGatheringPostValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<SkillResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionGeBuyItemMyNameActionGeBuyPost
     * @param name Name of your character. (required)
     * @param geTransactionItemSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully buy from the Grand Exchange. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Grand Exchange not found on this map. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> A transaction is already in progress on this item by a another character. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> Insufficient golds on your character. </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> No stock for this item. </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> No item at this price. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGeBuyItemMyNameActionGeBuyPostCall(String name, GETransactionItemSchema geTransactionItemSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = geTransactionItemSchema;

        // create path and map variables
        String localVarPath = "/my/{name}/action/ge/buy"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionGeBuyItemMyNameActionGeBuyPostValidateBeforeCall(String name, GETransactionItemSchema geTransactionItemSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionGeBuyItemMyNameActionGeBuyPost(Async)");
        }

        // verify the required parameter 'geTransactionItemSchema' is set
        if (geTransactionItemSchema == null) {
            throw new ApiException("Missing the required parameter 'geTransactionItemSchema' when calling actionGeBuyItemMyNameActionGeBuyPost(Async)");
        }

        return actionGeBuyItemMyNameActionGeBuyPostCall(name, geTransactionItemSchema, _callback);

    }

    /**
     * Action Ge Buy Item
     * Buy an item at the Grand Exchange on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param geTransactionItemSchema  (required)
     * @return GETransactionResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully buy from the Grand Exchange. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Grand Exchange not found on this map. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> A transaction is already in progress on this item by a another character. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> Insufficient golds on your character. </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> No stock for this item. </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> No item at this price. </td><td>  -  </td></tr>
     </table>
     */
    public GETransactionResponseSchema actionGeBuyItemMyNameActionGeBuyPost(String name, GETransactionItemSchema geTransactionItemSchema) throws ApiException {
        ApiResponse<GETransactionResponseSchema> localVarResp = actionGeBuyItemMyNameActionGeBuyPostWithHttpInfo(name, geTransactionItemSchema);
        return localVarResp.getData();
    }

    /**
     * Action Ge Buy Item
     * Buy an item at the Grand Exchange on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param geTransactionItemSchema  (required)
     * @return ApiResponse&lt;GETransactionResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully buy from the Grand Exchange. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Grand Exchange not found on this map. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> A transaction is already in progress on this item by a another character. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> Insufficient golds on your character. </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> No stock for this item. </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> No item at this price. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GETransactionResponseSchema> actionGeBuyItemMyNameActionGeBuyPostWithHttpInfo(String name, GETransactionItemSchema geTransactionItemSchema) throws ApiException {
        okhttp3.Call localVarCall = actionGeBuyItemMyNameActionGeBuyPostValidateBeforeCall(name, geTransactionItemSchema, null);
        Type localVarReturnType = new TypeToken<GETransactionResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Ge Buy Item (asynchronously)
     * Buy an item at the Grand Exchange on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param geTransactionItemSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully buy from the Grand Exchange. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Grand Exchange not found on this map. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> A transaction is already in progress on this item by a another character. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> Insufficient golds on your character. </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> No stock for this item. </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> No item at this price. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGeBuyItemMyNameActionGeBuyPostAsync(String name, GETransactionItemSchema geTransactionItemSchema, final ApiCallback<GETransactionResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionGeBuyItemMyNameActionGeBuyPostValidateBeforeCall(name, geTransactionItemSchema, _callback);
        Type localVarReturnType = new TypeToken<GETransactionResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionGeSellItemMyNameActionGeSellPost
     * @param name Name of your character. (required)
     * @param geTransactionItemSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully sell at the Grand Exchange. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> A transaction is already in progress on this item by a another character. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> No item at this price. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Grand Exchange not found on this map. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGeSellItemMyNameActionGeSellPostCall(String name, GETransactionItemSchema geTransactionItemSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = geTransactionItemSchema;

        // create path and map variables
        String localVarPath = "/my/{name}/action/ge/sell"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionGeSellItemMyNameActionGeSellPostValidateBeforeCall(String name, GETransactionItemSchema geTransactionItemSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionGeSellItemMyNameActionGeSellPost(Async)");
        }

        // verify the required parameter 'geTransactionItemSchema' is set
        if (geTransactionItemSchema == null) {
            throw new ApiException("Missing the required parameter 'geTransactionItemSchema' when calling actionGeSellItemMyNameActionGeSellPost(Async)");
        }

        return actionGeSellItemMyNameActionGeSellPostCall(name, geTransactionItemSchema, _callback);

    }

    /**
     * Action Ge Sell Item
     * Sell an item at the Grand Exchange on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param geTransactionItemSchema  (required)
     * @return GETransactionResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully sell at the Grand Exchange. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> A transaction is already in progress on this item by a another character. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> No item at this price. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Grand Exchange not found on this map. </td><td>  -  </td></tr>
     </table>
     */
    public GETransactionResponseSchema actionGeSellItemMyNameActionGeSellPost(String name, GETransactionItemSchema geTransactionItemSchema) throws ApiException {
        ApiResponse<GETransactionResponseSchema> localVarResp = actionGeSellItemMyNameActionGeSellPostWithHttpInfo(name, geTransactionItemSchema);
        return localVarResp.getData();
    }

    /**
     * Action Ge Sell Item
     * Sell an item at the Grand Exchange on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param geTransactionItemSchema  (required)
     * @return ApiResponse&lt;GETransactionResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully sell at the Grand Exchange. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> A transaction is already in progress on this item by a another character. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> No item at this price. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Grand Exchange not found on this map. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GETransactionResponseSchema> actionGeSellItemMyNameActionGeSellPostWithHttpInfo(String name, GETransactionItemSchema geTransactionItemSchema) throws ApiException {
        okhttp3.Call localVarCall = actionGeSellItemMyNameActionGeSellPostValidateBeforeCall(name, geTransactionItemSchema, null);
        Type localVarReturnType = new TypeToken<GETransactionResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Ge Sell Item (asynchronously)
     * Sell an item at the Grand Exchange on the character&#39;s map.
     * @param name Name of your character. (required)
     * @param geTransactionItemSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully sell at the Grand Exchange. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> A transaction is already in progress on this item by a another character. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> No item at this price. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Grand Exchange not found on this map. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionGeSellItemMyNameActionGeSellPostAsync(String name, GETransactionItemSchema geTransactionItemSchema, final ApiCallback<GETransactionResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionGeSellItemMyNameActionGeSellPostValidateBeforeCall(name, geTransactionItemSchema, _callback);
        Type localVarReturnType = new TypeToken<GETransactionResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionMoveMyNameActionMovePost
     * @param name Name of your character. (required)
     * @param destinationSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The character has moved successfully. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> Character already at destination. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionMoveMyNameActionMovePostCall(String name, DestinationSchema destinationSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = destinationSchema;

        // create path and map variables
        String localVarPath = "/my/{name}/action/move"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionMoveMyNameActionMovePostValidateBeforeCall(String name, DestinationSchema destinationSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionMoveMyNameActionMovePost(Async)");
        }

        // verify the required parameter 'destinationSchema' is set
        if (destinationSchema == null) {
            throw new ApiException("Missing the required parameter 'destinationSchema' when calling actionMoveMyNameActionMovePost(Async)");
        }

        return actionMoveMyNameActionMovePostCall(name, destinationSchema, _callback);

    }

    /**
     * Action Move
     * Moves a character on the map using the map&#39;s X and Y position.
     * @param name Name of your character. (required)
     * @param destinationSchema  (required)
     * @return CharacterMovementResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The character has moved successfully. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> Character already at destination. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
     </table>
     */
    public CharacterMovementResponseSchema actionMoveMyNameActionMovePost(String name, DestinationSchema destinationSchema) throws ApiException {
        ApiResponse<CharacterMovementResponseSchema> localVarResp = actionMoveMyNameActionMovePostWithHttpInfo(name, destinationSchema);
        return localVarResp.getData();
    }

    /**
     * Action Move
     * Moves a character on the map using the map&#39;s X and Y position.
     * @param name Name of your character. (required)
     * @param destinationSchema  (required)
     * @return ApiResponse&lt;CharacterMovementResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The character has moved successfully. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> Character already at destination. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CharacterMovementResponseSchema> actionMoveMyNameActionMovePostWithHttpInfo(String name, DestinationSchema destinationSchema) throws ApiException {
        okhttp3.Call localVarCall = actionMoveMyNameActionMovePostValidateBeforeCall(name, destinationSchema, null);
        Type localVarReturnType = new TypeToken<CharacterMovementResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Move (asynchronously)
     * Moves a character on the map using the map&#39;s X and Y position.
     * @param name Name of your character. (required)
     * @param destinationSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The character has moved successfully. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> Character already at destination. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionMoveMyNameActionMovePostAsync(String name, DestinationSchema destinationSchema, final ApiCallback<CharacterMovementResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionMoveMyNameActionMovePostValidateBeforeCall(name, destinationSchema, _callback);
        Type localVarReturnType = new TypeToken<CharacterMovementResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionRecyclingMyNameActionRecyclingPost
     * @param name Name of your character. (required)
     * @param recyclingSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The items were successfully recycled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Workshop not found on this map. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> Not skill level required. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 473 </td><td> This item cannot be recycled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRecyclingMyNameActionRecyclingPostCall(String name, RecyclingSchema recyclingSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recyclingSchema;

        // create path and map variables
        String localVarPath = "/my/{name}/action/recycling"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRecyclingMyNameActionRecyclingPostValidateBeforeCall(String name, RecyclingSchema recyclingSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionRecyclingMyNameActionRecyclingPost(Async)");
        }

        // verify the required parameter 'recyclingSchema' is set
        if (recyclingSchema == null) {
            throw new ApiException("Missing the required parameter 'recyclingSchema' when calling actionRecyclingMyNameActionRecyclingPost(Async)");
        }

        return actionRecyclingMyNameActionRecyclingPostCall(name, recyclingSchema, _callback);

    }

    /**
     * Action Recycling
     * Recyling an item. The character must be on a map with a workshop (only for equipments and weapons).
     * @param name Name of your character. (required)
     * @param recyclingSchema  (required)
     * @return RecyclingResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The items were successfully recycled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Workshop not found on this map. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> Not skill level required. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 473 </td><td> This item cannot be recycled. </td><td>  -  </td></tr>
     </table>
     */
    public RecyclingResponseSchema actionRecyclingMyNameActionRecyclingPost(String name, RecyclingSchema recyclingSchema) throws ApiException {
        ApiResponse<RecyclingResponseSchema> localVarResp = actionRecyclingMyNameActionRecyclingPostWithHttpInfo(name, recyclingSchema);
        return localVarResp.getData();
    }

    /**
     * Action Recycling
     * Recyling an item. The character must be on a map with a workshop (only for equipments and weapons).
     * @param name Name of your character. (required)
     * @param recyclingSchema  (required)
     * @return ApiResponse&lt;RecyclingResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The items were successfully recycled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Workshop not found on this map. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> Not skill level required. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 473 </td><td> This item cannot be recycled. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecyclingResponseSchema> actionRecyclingMyNameActionRecyclingPostWithHttpInfo(String name, RecyclingSchema recyclingSchema) throws ApiException {
        okhttp3.Call localVarCall = actionRecyclingMyNameActionRecyclingPostValidateBeforeCall(name, recyclingSchema, null);
        Type localVarReturnType = new TypeToken<RecyclingResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Recycling (asynchronously)
     * Recyling an item. The character must be on a map with a workshop (only for equipments and weapons).
     * @param name Name of your character. (required)
     * @param recyclingSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The items were successfully recycled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Workshop not found on this map. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> Not skill level required. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 473 </td><td> This item cannot be recycled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRecyclingMyNameActionRecyclingPostAsync(String name, RecyclingSchema recyclingSchema, final ApiCallback<RecyclingResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRecyclingMyNameActionRecyclingPostValidateBeforeCall(name, recyclingSchema, _callback);
        Type localVarReturnType = new TypeToken<RecyclingResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionTaskExchangeMyNameActionTaskExchangePost
     * @param name Name of your character. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tasks coins have been successfully exchanged. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Tasks Master not found on this map. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionTaskExchangeMyNameActionTaskExchangePostCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/{name}/action/task/exchange"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionTaskExchangeMyNameActionTaskExchangePostValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionTaskExchangeMyNameActionTaskExchangePost(Async)");
        }

        return actionTaskExchangeMyNameActionTaskExchangePostCall(name, _callback);

    }

    /**
     * Action Task Exchange
     * Exchange 3 tasks coins for a random reward. Rewards are exclusive resources for crafting  items.
     * @param name Name of your character. (required)
     * @return TaskRewardResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tasks coins have been successfully exchanged. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Tasks Master not found on this map. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public TaskRewardResponseSchema actionTaskExchangeMyNameActionTaskExchangePost(String name) throws ApiException {
        ApiResponse<TaskRewardResponseSchema> localVarResp = actionTaskExchangeMyNameActionTaskExchangePostWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Action Task Exchange
     * Exchange 3 tasks coins for a random reward. Rewards are exclusive resources for crafting  items.
     * @param name Name of your character. (required)
     * @return ApiResponse&lt;TaskRewardResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tasks coins have been successfully exchanged. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Tasks Master not found on this map. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskRewardResponseSchema> actionTaskExchangeMyNameActionTaskExchangePostWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = actionTaskExchangeMyNameActionTaskExchangePostValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<TaskRewardResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Task Exchange (asynchronously)
     * Exchange 3 tasks coins for a random reward. Rewards are exclusive resources for crafting  items.
     * @param name Name of your character. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tasks coins have been successfully exchanged. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Tasks Master not found on this map. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionTaskExchangeMyNameActionTaskExchangePostAsync(String name, final ApiCallback<TaskRewardResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionTaskExchangeMyNameActionTaskExchangePostValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<TaskRewardResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionUnequipItemMyNameActionUnequipPost
     * @param name Name of your character. (required)
     * @param unequipSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item has been successfully unequipped and added in his inventory. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> Slot is empty. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionUnequipItemMyNameActionUnequipPostCall(String name, UnequipSchema unequipSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unequipSchema;

        // create path and map variables
        String localVarPath = "/my/{name}/action/unequip"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionUnequipItemMyNameActionUnequipPostValidateBeforeCall(String name, UnequipSchema unequipSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionUnequipItemMyNameActionUnequipPost(Async)");
        }

        // verify the required parameter 'unequipSchema' is set
        if (unequipSchema == null) {
            throw new ApiException("Missing the required parameter 'unequipSchema' when calling actionUnequipItemMyNameActionUnequipPost(Async)");
        }

        return actionUnequipItemMyNameActionUnequipPostCall(name, unequipSchema, _callback);

    }

    /**
     * Action Unequip Item
     * Unequip an item on your character.
     * @param name Name of your character. (required)
     * @param unequipSchema  (required)
     * @return EquipmentResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item has been successfully unequipped and added in his inventory. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> Slot is empty. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public EquipmentResponseSchema actionUnequipItemMyNameActionUnequipPost(String name, UnequipSchema unequipSchema) throws ApiException {
        ApiResponse<EquipmentResponseSchema> localVarResp = actionUnequipItemMyNameActionUnequipPostWithHttpInfo(name, unequipSchema);
        return localVarResp.getData();
    }

    /**
     * Action Unequip Item
     * Unequip an item on your character.
     * @param name Name of your character. (required)
     * @param unequipSchema  (required)
     * @return ApiResponse&lt;EquipmentResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item has been successfully unequipped and added in his inventory. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> Slot is empty. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EquipmentResponseSchema> actionUnequipItemMyNameActionUnequipPostWithHttpInfo(String name, UnequipSchema unequipSchema) throws ApiException {
        okhttp3.Call localVarCall = actionUnequipItemMyNameActionUnequipPostValidateBeforeCall(name, unequipSchema, null);
        Type localVarReturnType = new TypeToken<EquipmentResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Unequip Item (asynchronously)
     * Unequip an item on your character.
     * @param name Name of your character. (required)
     * @param unequipSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item has been successfully unequipped and added in his inventory. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> Slot is empty. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionUnequipItemMyNameActionUnequipPostAsync(String name, UnequipSchema unequipSchema, final ApiCallback<EquipmentResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionUnequipItemMyNameActionUnequipPostValidateBeforeCall(name, unequipSchema, _callback);
        Type localVarReturnType = new TypeToken<EquipmentResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionWithdrawBankGoldMyNameActionBankWithdrawGoldPost
     * @param name Name of your character. (required)
     * @param depositWithdrawGoldSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Golds successfully withdraw from your bank. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 460 </td><td> Insufficient golds in your bank. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCall(String name, DepositWithdrawGoldSchema depositWithdrawGoldSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = depositWithdrawGoldSchema;

        // create path and map variables
        String localVarPath = "/my/{name}/action/bank/withdraw/gold"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostValidateBeforeCall(String name, DepositWithdrawGoldSchema depositWithdrawGoldSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(Async)");
        }

        // verify the required parameter 'depositWithdrawGoldSchema' is set
        if (depositWithdrawGoldSchema == null) {
            throw new ApiException("Missing the required parameter 'depositWithdrawGoldSchema' when calling actionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(Async)");
        }

        return actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostCall(name, depositWithdrawGoldSchema, _callback);

    }

    /**
     * Action Withdraw Bank Gold
     * Withdraw gold from your bank.
     * @param name Name of your character. (required)
     * @param depositWithdrawGoldSchema  (required)
     * @return GoldResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Golds successfully withdraw from your bank. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 460 </td><td> Insufficient golds in your bank. </td><td>  -  </td></tr>
     </table>
     */
    public GoldResponseSchema actionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(String name, DepositWithdrawGoldSchema depositWithdrawGoldSchema) throws ApiException {
        ApiResponse<GoldResponseSchema> localVarResp = actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithHttpInfo(name, depositWithdrawGoldSchema);
        return localVarResp.getData();
    }

    /**
     * Action Withdraw Bank Gold
     * Withdraw gold from your bank.
     * @param name Name of your character. (required)
     * @param depositWithdrawGoldSchema  (required)
     * @return ApiResponse&lt;GoldResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Golds successfully withdraw from your bank. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 460 </td><td> Insufficient golds in your bank. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoldResponseSchema> actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithHttpInfo(String name, DepositWithdrawGoldSchema depositWithdrawGoldSchema) throws ApiException {
        okhttp3.Call localVarCall = actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostValidateBeforeCall(name, depositWithdrawGoldSchema, null);
        Type localVarReturnType = new TypeToken<GoldResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Withdraw Bank Gold (asynchronously)
     * Withdraw gold from your bank.
     * @param name Name of your character. (required)
     * @param depositWithdrawGoldSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Golds successfully withdraw from your bank. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 460 </td><td> Insufficient golds in your bank. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostAsync(String name, DepositWithdrawGoldSchema depositWithdrawGoldSchema, final ApiCallback<GoldResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionWithdrawBankGoldMyNameActionBankWithdrawGoldPostValidateBeforeCall(name, depositWithdrawGoldSchema, _callback);
        Type localVarReturnType = new TypeToken<GoldResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionWithdrawBankMyNameActionBankWithdrawPost
     * @param name Name of your character. (required)
     * @param simpleItemSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully withdraw from your bank. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionWithdrawBankMyNameActionBankWithdrawPostCall(String name, SimpleItemSchema simpleItemSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simpleItemSchema;

        // create path and map variables
        String localVarPath = "/my/{name}/action/bank/withdraw"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionWithdrawBankMyNameActionBankWithdrawPostValidateBeforeCall(String name, SimpleItemSchema simpleItemSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling actionWithdrawBankMyNameActionBankWithdrawPost(Async)");
        }

        // verify the required parameter 'simpleItemSchema' is set
        if (simpleItemSchema == null) {
            throw new ApiException("Missing the required parameter 'simpleItemSchema' when calling actionWithdrawBankMyNameActionBankWithdrawPost(Async)");
        }

        return actionWithdrawBankMyNameActionBankWithdrawPostCall(name, simpleItemSchema, _callback);

    }

    /**
     * Action Withdraw Bank
     * Take an item from your bank and put it in the character&#39;s inventory.
     * @param name Name of your character. (required)
     * @param simpleItemSchema  (required)
     * @return ActionItemBankResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully withdraw from your bank. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public ActionItemBankResponseSchema actionWithdrawBankMyNameActionBankWithdrawPost(String name, SimpleItemSchema simpleItemSchema) throws ApiException {
        ApiResponse<ActionItemBankResponseSchema> localVarResp = actionWithdrawBankMyNameActionBankWithdrawPostWithHttpInfo(name, simpleItemSchema);
        return localVarResp.getData();
    }

    /**
     * Action Withdraw Bank
     * Take an item from your bank and put it in the character&#39;s inventory.
     * @param name Name of your character. (required)
     * @param simpleItemSchema  (required)
     * @return ApiResponse&lt;ActionItemBankResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully withdraw from your bank. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionItemBankResponseSchema> actionWithdrawBankMyNameActionBankWithdrawPostWithHttpInfo(String name, SimpleItemSchema simpleItemSchema) throws ApiException {
        okhttp3.Call localVarCall = actionWithdrawBankMyNameActionBankWithdrawPostValidateBeforeCall(name, simpleItemSchema, null);
        Type localVarReturnType = new TypeToken<ActionItemBankResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Action Withdraw Bank (asynchronously)
     * Take an item from your bank and put it in the character&#39;s inventory.
     * @param name Name of your character. (required)
     * @param simpleItemSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item successfully withdraw from your bank. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> Character in cooldown. </td><td>  -  </td></tr>
        <tr><td> 461 </td><td> A transaction is already in progress with this item/your golds in your bank. </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> An action is already in progress by your character. </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> Character inventory is full. </td><td>  -  </td></tr>
        <tr><td> 598 </td><td> Bank not found on this map. </td><td>  -  </td></tr>
        <tr><td> 478 </td><td> Missing item or insufficient quantity in your inventory. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionWithdrawBankMyNameActionBankWithdrawPostAsync(String name, SimpleItemSchema simpleItemSchema, final ApiCallback<ActionItemBankResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionWithdrawBankMyNameActionBankWithdrawPostValidateBeforeCall(name, simpleItemSchema, _callback);
        Type localVarReturnType = new TypeToken<ActionItemBankResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllCharactersLogsMyLogsGet
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched logs. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Logs not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCharactersLogsMyLogsGetCall(Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCharactersLogsMyLogsGetValidateBeforeCall(Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        return getAllCharactersLogsMyLogsGetCall(page, size, _callback);

    }

    /**
     * Get All Characters Logs
     * History of the last 100 actions of all your characters.
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return DataPageLogSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched logs. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Logs not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
     </table>
     */
    public DataPageLogSchema getAllCharactersLogsMyLogsGet(Integer page, Integer size) throws ApiException {
        ApiResponse<DataPageLogSchema> localVarResp = getAllCharactersLogsMyLogsGetWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * Get All Characters Logs
     * History of the last 100 actions of all your characters.
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @return ApiResponse&lt;DataPageLogSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched logs. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Logs not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataPageLogSchema> getAllCharactersLogsMyLogsGetWithHttpInfo(Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getAllCharactersLogsMyLogsGetValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<DataPageLogSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Characters Logs (asynchronously)
     * History of the last 100 actions of all your characters.
     * @param page Page number (optional, default to 1)
     * @param size Page size (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched logs. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Logs not found. </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> Character not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCharactersLogsMyLogsGetAsync(Integer page, Integer size, final ApiCallback<DataPageLogSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCharactersLogsMyLogsGetValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<DataPageLogSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMyCharactersMyCharactersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched characters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Characters not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyCharactersMyCharactersGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/characters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMyCharactersMyCharactersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getMyCharactersMyCharactersGetCall(_callback);

    }

    /**
     * Get My Characters
     * List of your characters.
     * @return MyCharactersListSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched characters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Characters not found. </td><td>  -  </td></tr>
     </table>
     */
    public MyCharactersListSchema getMyCharactersMyCharactersGet() throws ApiException {
        ApiResponse<MyCharactersListSchema> localVarResp = getMyCharactersMyCharactersGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get My Characters
     * List of your characters.
     * @return ApiResponse&lt;MyCharactersListSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched characters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Characters not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MyCharactersListSchema> getMyCharactersMyCharactersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMyCharactersMyCharactersGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MyCharactersListSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get My Characters (asynchronously)
     * List of your characters.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully fetched characters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Characters not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMyCharactersMyCharactersGetAsync(final ApiCallback<MyCharactersListSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMyCharactersMyCharactersGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MyCharactersListSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
